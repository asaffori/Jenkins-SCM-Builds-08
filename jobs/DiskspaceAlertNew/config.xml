<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@1.19.2">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <org.bstick12.jenkinsci.plugins.leastload.LeastLoadDisabledProperty plugin="leastload@2.0.1">
      <leastLoadDisabled>false</leastLoadDisabled>
    </org.bstick12.jenkinsci.plugins.leastload.LeastLoadDisabledProperty>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.28">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>BUILD_VERSION</name>
          <description>&lt;B&gt;Value can be:&lt;/B&gt; &lt;BR&gt;
version as 17.01.00.20600 &lt;BR&gt;
Version file which contain the version as a value for the &apos;CurrentVersion&apos; property. As \\isr1appcc02\SCM\OMD\Jenkins_Build_Version\17.02Version.txt&lt;BR&gt;</description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>MajorMinor_Ver</name>
          <description>&lt;B&gt;Value can be:&lt;/B&gt; &lt;BR&gt;
version as 17.01 &lt;BR&gt;
This value will be used ONLY if BUILD_VERSION was provided as a filepath and not a specific version</description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <org.jvnet.jenkins.plugins.nodelabelparameter.NodeParameterDefinition plugin="nodelabelparameter@1.7.2">
          <name>executeIn</name>
          <description></description>
          <allowedSlaves/>
          <defaultSlaves>
            <string>master</string>
          </defaultSlaves>
          <triggerIfResult>multiSelectionDisallowed</triggerIfResult>
          <allowMultiNodeSelection>false</allowMultiNodeSelection>
          <triggerConcurrentBuilds>false</triggerConcurrentBuilds>
          <ignoreOfflineNodes>false</ignoreOfflineNodes>
          <nodeEligibility class="org.jvnet.jenkins.plugins.nodelabelparameter.node.AllNodeEligibility"/>
        </org.jvnet.jenkins.plugins.nodelabelparameter.NodeParameterDefinition>
        <org.jvnet.jenkins.plugins.nodelabelparameter.NodeParameterDefinition plugin="nodelabelparameter@1.7.2">
          <name>buildEngineHostName</name>
          <description></description>
          <allowedSlaves/>
          <defaultSlaves/>
          <triggerIfResult>multiSelectionDisallowed</triggerIfResult>
          <allowMultiNodeSelection>false</allowMultiNodeSelection>
          <triggerConcurrentBuilds>false</triggerConcurrentBuilds>
          <ignoreOfflineNodes>false</ignoreOfflineNodes>
          <nodeEligibility class="org.jvnet.jenkins.plugins.nodelabelparameter.node.AllNodeEligibility"/>
        </org.jvnet.jenkins.plugins.nodelabelparameter.NodeParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
      <configVersion>1</configVersion>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    <org.jvnet.hudson.plugins.shelveproject.ShelveProjectProperty plugin="shelve-project-plugin@1.5"/>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>30</daysToKeep>
        <numToKeep>-1</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.BatchFile>
      <command>::Delete old generated files&#xd;
del C:\Temp\diskSpaceAlert.html</command>
    </hudson.tasks.BatchFile>
    <hudson.plugins.groovy.SystemGroovy plugin="groovy@2.0">
      <source class="hudson.plugins.groovy.StringSystemScriptSource">
        <script plugin="script-security@1.44">
          <script>/**
*
* This script is respinsible to calculate free disk spaces in given paths list. 
* If the path is  a network path, the check and the calculation is done under the Jenkins master slave.
* If the path is a local path, the mechanism is connecting to the relevant node ( mentioned in buildEngineHostName parameter) and calculate the free disk space in that path/Filesystem.
* In case any of the FileSystems free disk space is lower than threshould, the job execution is marked as failed, html mail is sent with detailed table about the given paths and the free disk space in each one of them. In addition the build summery page is getting updated with the HTML mail content.
* Please note that mail is sent only if build failed. and build is failing only if one of the given share/local paths has disk free disk space lower than predefined threashould
* 
* @author  Adham Saffori
* @version 2.0
* @since   2017-09-11
*/
import hudson.model.*;
import hudson.util.*;
import jenkins.model.*;
import hudson.FilePath;
import hudson.FilePath.FileCallable;
import hudson.slaves.OfflineCause;
import hudson.node_monitors.*;

//Init parametrs
int totalCapacity
int freePartitionSpace
String folderPath
def diskspace_threshould
//The following parameter ius used as indicator for the job inorder to know when the job should be marked as failed to enable the mail to be diskpatched with diskspace 
def shouldAlertBeSent=false  

//If the given is BUILD_VERSION parameter a version file path, defind a groovy variable called BUILD_VERSION as MajorMinor value, otherwise define it as the value of the given BUILD_VERSION parameter.
def BUILD_VERSION=build.buildVariableResolver.resolve(&quot;BUILD_VERSION&quot;).startsWith(&quot;\\&quot;) ? build.buildVariableResolver.resolve(&quot;MajorMinor_Ver&quot;):build.buildVariableResolver.resolve(&quot;BUILD_VERSION&quot;);

//Share folders are used with slashes instead of back slashes which are considered as escape characters by groovy/java.
List&lt;String[]&gt; candidators_list=[[&quot;D:/&quot;,&quot;Snadbox&quot;,&quot;170&quot;],
								 [&quot;////isr1appcc02//views//OMD&quot;,&quot;CodeView&quot;,&quot;90&quot;],
								 [&quot;////isr1nas03//SW-omd//Archer_Builds&quot;,&quot;BuildOutputs&quot;,&quot;90&quot;],
								 [&quot;////isr1nas03//SW-omd//Archer_Installations&quot;,&quot;Media&quot;,&quot;50&quot;]]

//definition email parts
def comupterName=build.buildVariableResolver.resolve(&quot;buildEngineHostName&quot;);
def title=&quot;Build related FS disk Space usage in &quot; + comupterName
def build_msg= BUILD_VERSION != &quot;&quot;? &quot;&lt;BR&gt;Build of &quot;+ BUILD_VERSION+&quot; started on &quot;+ comupterName +&quot;, but may fail with diskspace issues.&quot; :&quot;&quot;
def introduction=&quot;Dear user, &lt;ol&gt;${build_msg}&lt;BR&gt;Following filesystems has free space less than requeted - Next build may fail:&quot;

//defining diskspace html table 
def table=&quot;&lt;TABLE BORDER=\&quot;4\&quot; CELLPADDING=\&quot;4\&quot; CELLSPACING=\&quot;5\&quot;&gt;&lt;TR&gt;&lt;TH COLSPAN=\&quot;5\&quot;&gt;&lt;H1&gt;&quot; +title+ &quot;&lt;/H1&gt;&lt;/TH&gt;&lt;/TR&gt;&lt;TR&gt;&quot;
table+=&quot;&lt;TH&gt; Description &lt;/TH&gt;&lt;TH&gt; URL/Path &lt;/TH&gt;&lt;TH&gt;Total Capacity (GB)&lt;/TH&gt;&lt;TH&gt;Free Space (GB)&lt;/TH&gt;&lt;TH&gt;Threshould (GB)&lt;/TH&gt;&lt;/TR&gt;&quot;
               
for (String[] candidator : candidators_list){  /////////////////////////////// Change the calculation to work with INT
	diskspace_threshould = candidator[2] as int;                
	//If given path is a share folder, read its data from the Jenkins master. 
	if (candidator[0].startsWith(&quot;//&quot;) || candidator[0].startsWith(&quot;\\&quot;)){
		File diskPartition = new File(candidator[0]);
		//Converting values from Bytes to Gega Bytes
		totalCapacity = diskPartition.getTotalSpace()/ (1024*1024*1024);
		 freePartitionSpace = diskPartition.getFreeSpace()/ (1024*1024*1024);
		folderPath=diskPartition.getPath()
	}else{
		//If given path is a local path, connect to the node and read data from the node. 
		for (node in Jenkins.instance.nodes) {
				computer = node.toComputer()
				if (computer == null || !computer.getDisplayName().equalsIgnoreCase(comupterName)) continue
				//Check if node is connected and have channel
				if (computer.getChannel() == null) {
					throw new IOException(&quot;Node &apos;&quot;+ comupterName +&quot;&apos; is inaccessible&quot;)
				}
				//Ready local path free disk data
				FilePath diskPartition = node.createPath(candidator[0]);
				//Converting values from Bytes to Gega Bytes
				totalCapacity = diskPartition.getTotalDiskSpace()/ (1024*1024*1024);
				freePartitionSpace = diskPartition.getFreeDiskSpace()/ (1024*1024*1024);
				folderPath= diskPartition.getRemote()
		}
	}

	if (freePartitionSpace &lt; diskspace_threshould ) {
			//raise a flag to alert for disk space issuies by mail and fail the job execution
			shouldAlertBeSent=true;
			introduction+= &quot;&lt;blockquote&gt;&lt;li&gt;&quot; + folderPath +&quot;&lt;/li&gt;&lt;/blockquote&gt;&quot;
			   color=&quot; bgcolor=\&quot;#FF0000\&quot;&quot;
	}else{
	  color=&quot;&quot;
	}
	//updating html table with new recod
	table+=&quot;&lt;TR ALIGN=\&quot;CENTER\&quot;&quot;+color+&quot;&gt;&lt;TD&gt;&quot;+ candidator[1]+ &quot;&lt;/TD&gt;&quot;    
	table+= &quot;&lt;TD&gt;&quot; +folderPath+ &quot;&lt;/TD&gt;&quot;
	table+=&quot;&lt;TD&gt;&quot;+ totalCapacity + &quot;&lt;/TD&gt;&quot;
	table+=&quot;&lt;TD&gt;&quot;+ freePartitionSpace+ &quot;&lt;/TD&gt;&quot;
	table+=&quot;&lt;TD&gt;&quot;+diskspace_threshould  + &quot;&lt;/TD&gt;&lt;/TR&gt;&quot;
}

//closing the HTML table
table+=&quot;&lt;/TABLE&gt;&quot;

//save mail content to HTMLK file to be laoded by Jenkins mail plugin and shared in email
new File(&quot;C:/Temp/diskSpaceAlert.html&quot;).write(introduction + &quot;&lt;BR&gt;&quot; + table +&quot;&lt;/ol&gt;&quot;)

//Mark the job execution as failed inorder to enable it sending the email if disk space issues were raised
if (shouldAlertBeSent)
	build.result = hudson.model.Result.fromString(&apos;FAILED&apos;)</script>
          <sandbox>false</sandbox>
        </script>
      </source>
    </hudson.plugins.groovy.SystemGroovy>
  </builders>
  <publishers>
    <hudson.plugins.emailext.ExtendedEmailPublisher plugin="email-ext@2.62">
      <recipientList>Adham.Saffori@kla-tencor.com,Omer.Shachor@kla-tencor.com,Agnes.Zhang@kla-tencor.com,Sharon.Mizrachi@kla-tencor.com,Cathy.Wang@kla-tencor.com</recipientList>
      <configuredTriggers>
        <hudson.plugins.emailext.plugins.trigger.FailureTrigger>
          <email>
            <subject>$PROJECT_DEFAULT_SUBJECT</subject>
            <body>$PROJECT_DEFAULT_CONTENT</body>
            <recipientProviders>
              <hudson.plugins.emailext.plugins.recipients.ListRecipientProvider/>
            </recipientProviders>
            <attachmentsPattern></attachmentsPattern>
            <attachBuildLog>false</attachBuildLog>
            <compressBuildLog>false</compressBuildLog>
            <replyTo>$PROJECT_DEFAULT_REPLYTO</replyTo>
            <contentType>project</contentType>
          </email>
        </hudson.plugins.emailext.plugins.trigger.FailureTrigger>
      </configuredTriggers>
      <contentType>default</contentType>
      <defaultSubject></defaultSubject>
      <defaultContent>${FILE,path=&quot;C:/Temp/diskSpaceAlert.html&quot;}</defaultContent>
      <attachmentsPattern></attachmentsPattern>
      <presendScript>def VERSION= build.getEnvVars().get(&quot;BUILD_VERSION&quot;);
fBuildNum= new File(VERSION)
if (fBuildNum.exists())
    VERSION=build.getEnvVars().get(&quot;MajorMinor_Ver&quot;)
msg.setSubject(&quot;Build &quot; + VERSION +&quot; - Disk space alert&quot;);</presendScript>
      <postsendScript>import org.jvnet.hudson.plugins.groovypostbuild.*;
import  javax.mail.Multipart;

// create the summary with the document icon and attach to the build
GroovyPostbuildSummaryAction action = new GroovyPostbuildSummaryAction(&quot;notepad.png&quot;);
build.getActions().add(action);
// Read mail content and attach it to the build summary
Multipart mp= (Multipart)msg.getContent()
action.appendText(mp.getBodyPart(0).getContent().toString(), false);
//save the build!
build.save()</postsendScript>
      <attachBuildLog>false</attachBuildLog>
      <compressBuildLog>false</compressBuildLog>
      <replyTo>$DEFAULT_REPLYTO</replyTo>
      <from></from>
      <saveOutput>false</saveOutput>
      <disabled>false</disabled>
    </hudson.plugins.emailext.ExtendedEmailPublisher>
  </publishers>
  <buildWrappers/>
</project>