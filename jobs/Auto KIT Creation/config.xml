<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.23">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.1"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.3.1">
      <jobProperties/>
      <triggers/>
      <parameters>
        <string>Version</string>
      </parameters>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>30</daysToKeep>
        <numToKeep>-1</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@1.19.2">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <org.bstick12.jenkinsci.plugins.leastload.LeastLoadDisabledProperty plugin="leastload@2.0.1">
      <leastLoadDisabled>false</leastLoadDisabled>
    </org.bstick12.jenkinsci.plugins.leastload.LeastLoadDisabledProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.28">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>Version</name>
          <description>Which Version you want to Create KIT?</description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.54">
    <script>import groovy.io.FileType

pipeline {
    agent any
    environment { 
        networkpath=&apos;\\\\klasj\\ktfiles\\Regions\\Israel\\SWGRP\\SW-OMD&apos;
        codeviewpath=&apos;\\\\isr1appcc02\\Views\\OMD&apos;
        phoenixpath=&apos;\\\\klasj\\ktfiles\\Regions\\Israel\\SWGRP\\SW-Common\\Phoenix&apos;
    }
    parameters {
        string(name: &apos;Version&apos;, description: &apos;Which Version you want to Create KIT?&apos;)
    }
	stages {
	    
	    stage (&apos;validation&apos;) {
            steps (&apos;vaiidate&apos;) {
	                script{
	                    currentBuild.description = &quot;Creat KIT for ${params.Version}&quot;
	                if(params.Version==&quot;&quot;){
    				    exitwitherror(&quot;Version is not defined&quot;)
	                }
	                shortversion=params.Version.substring(6,8)==&apos;00&apos;?Version.substring(0,6):params.Version.substring(0,8)
	                zipversion=shortversion.replaceAll(&quot;\\.&quot;,&quot;_&quot;)
					majorminor=params.Version.substring(0,5)
					def installerdir = &quot;${networkpath}\\Archer_Installations\\NuArcher_V&quot;+majorminor+&quot;\\Formal\\Archer_Installation_&quot;+params.Version
					def installationfile=new File(installerdir)
					if(!installationfile.exists())exitwitherror(&quot;Archer installation folder doesn&apos;t exist&quot;)
	            }
            }
	    }
	    stage (&apos;ZipInstallation&apos;)
	    {
	        steps (&apos;ZipInstaller&apos;) {
	               script{
						installerdir = &quot;${networkpath}\\Archer_Installations\\NuArcher_V&quot;+majorminor+&quot;\\Formal\\Archer_Installation_&quot;+params.Version
						def zipname=&quot;Archer_&quot;+params.Version+&quot;_Install.exe&quot;
						def exename=&quot;Archer_&quot;+zipversion+&quot;_Install.exe&quot;
						kitpath=&quot;${networkpath}\\Archer_Installations\\NuArcher_V&quot;+majorminor+&quot;\\Formal\\ArcherSWInsKIT_&quot;+params.Version

						//bat &quot;7z a ${kitpath}\\${zipname} ${installerdir}\\*&quot;
						
						File configfile = new File(kitpath+&quot;\\config.txt&quot;)
						configfile.write &quot;;!@Install@!UTF-8!\n;Title=\&quot;Archer SOFTWARE v&quot;+params.Version+&quot;\&quot;\n;BeginPrompt=\&quot;Do you want to install Archer SOFTWARE v&quot;+params.Version+&quot;?\&quot;\n\nRunProgram=\&quot;setup.exe\&quot;\n;!@InstallEnd@!\n&quot;
					
						//bat &quot;copy /b ${networkpath}\\Archer_Installations\\SCM\\General\\self-extractingWith-7zip\\7zS.sfx + &quot;+kitpath+&quot;\\config.txt + &quot;+kitpath+&quot;\\&quot;+zipname+&quot; &quot;+kitpath+&quot;\\&quot;+exename
						
						bat &quot;del /F /Q ${kitpath}\\${zipname}&quot;
						bat &quot;del /F /Q ${kitpath}\\config.txt&quot;
	               }
	       
	            }
	        
	    
		}
		
		stage (&apos;Ziptoolconfig&apos;){
			steps (&apos;ziptoolconfig&apos;){
				script{
					TCdir = &quot;${networkpath}\\Archer_Installations\\NuArcher_V&quot;+majorminor+&quot;\\Formal\\Archer_Installation_&quot;+params.Version+&quot;\\supportfiles\\ToolConfig&quot;			
					bat &quot;7z a -sfx7z.sfx ${kitpath}\\ToolConfiguration\\Tool_Configuration.exe&quot;+&quot; &quot;+TCdir+&quot;\\MCDBXML.exe &quot;+TCdir+&quot;\\NG.McdbXml.dll &quot;+TCdir+&quot;\\ToolConfig.exe &quot;+TCdir+&quot;\\ToolConfig.exe.config&quot;

					def TCdocfolder=&quot;${codeviewpath}\\OMD-UN_+${majorminor}\\UOMD_BLD_${params.Version}\\OMD_CommonUtilities\\ToolConfig\\Procedure&quot;
					bat &quot;xcopy &quot;+&quot;${TCdocfolder}\\*.* ${kitpath}\\ToolConfiguration\\ /f&quot;
				}
			}
		}
		stage (&apos;document&apos;){
			steps (&apos;CopyDoc&apos;){
				script{
					bat &quot;xcopy &quot;+&quot;${networkpath}\\Archer_Installations\\SupportFiles\\Procedures\\DocumentForKit\\*.*&quot; + &quot; ${networkpath}\\Archer_Installations\\NuArcher_V&quot;+majorminor+&quot;\\Formal\\ArcherSWInsKIT_&quot;+params.Version+&quot;\\Documentation\\ /f&quot;
					
				}
			}
		}
		stage (&apos;Phoenix&apos;){
			steps (&apos;CopyPhoenix&apos;){
				script{
					def buildnotice= &quot;${codeviewpath}\\OMD-UN_&quot;+majorminor+&quot;\\UOMD_BLD_&quot;+params.Version+&quot;_code&quot;+ &quot;/OMD_Builds/JenkinsBuild/Instructions/InstallationInstruction.html&quot;;
	                def buildnoticefile = new File(buildnotice)
					def phoenixversion
					if(buildnoticefile.exists()){
                		echo &quot;found the buildnotice file&quot;				
                		builtnoticecontent=buildnoticefile.readLines()
                		for(String line : builtnoticecontent){
                			if(line.contains(&quot;&gt;Phoenix&lt;&quot;)){
                			 string subline=line.substring(line.indexOf(&quot;&lt;TD&gt;&quot;)+4,line.length()-5)
                			 phoenixversion=subline
                			 echo phoenixversion
                			continue
                			}
                		  }
                		 for(String line : builtnoticecontent){
                			if(line.contains(&quot;&gt;Mil&lt;&quot;)){
                			 string subline=line.substring(line.indexOf(&quot;&lt;TD&gt;&quot;)+4,line.length()-5)
                			 milversion=subline
                			 echo milversion
                			continue
                			}
                		  }
                	}
                	else{
                	    exitwitherror(&quot;Build notice file under code view folder doesn&apos;t exist&quot;)
                	}
					phoenixversion=phoenixversion.trim()
					String[] str;
					str = phoenixversion.split(&apos;\\+&apos;);
					for( String values : str ){
					    phoenixver=values.trim()
						echo phoenixver
						String[] phoenixdigit
						phoenixdigit=phoenixver.split(&apos;\\.&apos;);
						phoenixshortver=phoenixdigit[0]+&apos;.&apos;+phoenixdigit[1]
						echo phoenixshortver
						bat &quot;xcopy &quot;+&quot;${phoenixpath}\\V${phoenixshortver}\\V${phoenixver}\\*.*&quot; + &quot; ${networkpath}\\Archer_Installations\\NuArcher_V&quot;+majorminor+&quot;\\Formal\\ArcherSWInsKIT_&quot;+params.Version+&quot;\\Phoenix\\Phoenix_V${phoenixver}\\ /f&quot;
					    bat &quot;7z a -sfx7z.sfx ${networkpath}\\Archer_Installations\\NuArcher_V&quot;+majorminor+&quot;\\Formal\\ArcherSWInsKIT_&quot;+params.Version+&quot;\\Phoenix\\Phoenix_V${phoenixver}.exe&quot;+&quot; ${networkpath}\\Archer_Installations\\NuArcher_V&quot;+majorminor+&quot;\\Formal\\ArcherSWInsKIT_&quot;+params.Version+&quot;\\Phoenix\\Phoenix_V${phoenixver}\\*&quot;
						bat &quot;xcopy ${networkpath}\\Archer_Installations\\NuArcher_V&quot;+majorminor+&quot;\\Formal\\ArcherSWInsKIT_&quot;+params.Version+&quot;\\Phoenix\\Phoenix_V${phoenixver}\\*.pdf ${networkpath}\\Archer_Installations\\NuArcher_V&quot;+majorminor+&quot;\\Formal\\ArcherSWInsKIT_&quot;+params.Version+&quot;\\Phoenix\\ /f&quot;
					    phoenixdir=new File(&quot;${networkpath}\\Archer_Installations\\NuArcher_V&quot;+majorminor+&quot;\\Formal\\ArcherSWInsKIT_&quot;+params.Version+&quot;\\Phoenix\\Phoenix_V${phoenixver}&quot;)
					    if(phoenixdir.exists()) phoenixdir.deleteDir() 

					}
					bat &quot;xcopy &quot;+&quot;${networkpath}\\Archer_Installations\\SupportFiles\\${milversion}_Installation.exe&quot; + &quot; ${networkpath}\\Archer_Installations\\NuArcher_V&quot;+majorminor+&quot;\\Formal\\ArcherSWInsKIT_&quot;+params.Version+&quot;\\ /f&quot;
	
				}
			}
		}
		
	}
	post { 
			success { 
				wrap([$class: &apos;BuildUser&apos;]) {
						// notify users when the Pipeline success
						emailext (to: &quot;${BUILD_USER_EMAIL}&quot;,
						subject: &quot;Kit Creation for ${params.Version} - SUCCESS&quot;,
						body: &quot;&quot;&quot;
						Dear User:&lt;br&gt;
						Kit for ${params.Version} is created successfully!&lt;br&gt;
						Files are under:&lt;br&gt;
						${networkpath}\\Archer_Installations\\NuArcher_V${majorminor}\\Formal\\ArcherSWInsKIT_${params.Version}\\&lt;br&gt;
						
						&quot;&quot;&quot;);
				}
			}
			failure { 
				wrap([$class: &apos;BuildUser&apos;]) {
						// notify users when the Pipeline success
						emailext (to: &quot;${BUILD_USER_EMAIL}&quot;,
						subject: &quot;Kit Creation for ${params.Version} - FAILURE&quot;,
						body: &quot;&quot;&quot;
						Dear User:&lt;br&gt;
						KIT Creation for ${params.Version} failed, check the below log link for more details&lt;br&gt;
						${env.BUILD_URL}&lt;br&gt;
						&quot;&quot;&quot;);
				}
				
			}
		}
	
}

def exitwitherror(msg){
    print (msg)
    throw new Exception(msg)
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>