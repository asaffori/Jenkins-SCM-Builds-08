<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.23">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.1"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.3.1">
      <jobProperties/>
      <triggers/>
      <parameters/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@1.19.2">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <org.bstick12.jenkinsci.plugins.leastload.LeastLoadDisabledProperty plugin="leastload@2.0.1">
      <leastLoadDisabled>false</leastLoadDisabled>
    </org.bstick12.jenkinsci.plugins.leastload.LeastLoadDisabledProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.28">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.54">
    <script>import hudson.security.SecurityRealm;
import com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition
import groovy.io.FileType
import hudson.model.labels.LabelAtom
pipeline {
    agent { node { label &apos;master&apos; } }
    stages {
        stage(&apos;build&apos;) {
            steps {

                script {
                    def user_team
                    wrap([$class: &apos;BuildUser&apos;]) {

                    try{
                    
                       user_team = ((String[])Jenkins.instance.securityRealm.loadUserByUsername(BUILD_USER_ID).getAuthorities()).contains(&quot;DL-OMD-ENG-SCM&quot;) ? &quot;DevOps&quot;: &quot;Dev&quot;
                    
                    }catch (Exception e){
                        print (&quot;Failed while retreaving groups for user &quot;+ BUILD_USER_ID)
                        throw (e)
                    }
                        DevOpsBuildTypes = &apos;Scheduled\nFormal\nSupport\nTasks&apos;
                        DevBuildTypes = &apos;Tasks\nFormal&apos;
                        FormalVersion_choice_list = getFormalVersionsList().join(&apos;\n&apos;)

                    
                   def Dev_Formal_Build_Params =[[$class: &apos;ChoiceParameterDefinition&apos;, choices: user_team == &apos;DevOps&apos;? DevOpsBuildTypes:DevBuildTypes , description: &apos;Which build type you would like to run ?&apos;, name: &apos;BUILDTYPE&apos;]]
                   
                   def DevOps_Formal_Build_Params =[
                       [$class: &apos;ChoiceParameterDefinition&apos;, choices: user_team == &apos;DevOps&apos;? DevOpsBuildTypes:DevBuildTypes , description: &apos;Which build type you would like to run ?&apos;, name: &apos;BUILDTYPE&apos;],
                    [$class: &apos;ChoiceParameterDefinition&apos;, choices: FormalVersion_choice_list , description: &apos;Which version you would like to run the build for ?&apos;, name: &apos;MajorMinor&apos;]]

                    
                    def userInput = input(
                        id: &apos;userInput&apos;, message: &apos;Hello &apos;+BUILD_USER+&apos;\n Identified as &apos;+user_team+ &apos; user&apos;, parameters: user_team == &apos;DevOps&apos;? DevOps_Formal_Build_Params:Dev_Formal_Build_Params,ok:&apos;Lets continue&apos;
                    )
                   RunAsOmdbuild = (userInput.BUILDTYPE == &apos;Task&apos; ? false:true)
                   String defaultScheduledBuildVersion= new File(&quot;\\\\isr1appcc02\\scm\\OMD\\Jenkins_Build_Version\\&quot;+userInput.MajorMinor+&quot;version.txt&quot;).readLines().get(1).split(&apos;=&apos;)[1]
                   String[] tmpNumArray=((String)defaultScheduledBuildVersion).tokenize(&quot;.&quot;)
                   int num = tmpNumArray[3] as Integer
                   tmpFormal= (num.intdiv(100) +1) *100 as String 
                   tmpScheduled= num +1  as String 
                   tmpNumArray[3] = userInput.BUILDTYPE  == &apos;Formal&apos; ? tmpFormal: tmpScheduled
                   nextBN= tmpNumArray.join(&apos;.&apos;)
                   
                   try{
                        def user_workspaces = []
                        wrap([$class: &apos;BuildUser&apos;]) {
                                print (&apos;Are you sure?&apos; + userInput.BUILDTYPE + RunAsOmdbuild  + (RunAsOmdbuild == true))
                                user_id=RunAsOmdbuild ? &apos;omdbuild&apos;:BUILD_USER_ID
                                user_workspaces = getUserRTCWorkspaces(user_id)
                        }
                        workspace_prefix=(RunAsOmdbuild ? &apos;omdbuild_Archer_&apos;:&apos;&apos;)
                        print workspace_prefix
                        build_type=(userInput.BUILDTYPE == &apos;Formal&apos; ? &apos;Integ&apos;:(userInput.BUILDTYPE == &apos;Scheduled&apos; ?&apos;Dev&apos;:&apos;&apos;))
                        print build_type
                        workspace_suffix=RunAsOmdbuild ? &apos;_&apos;+build_type + &apos;_Workspace&apos;:&apos;&apos;
                        print workspace_suffix
                        def req_workspace = user_workspaces.find { item -&gt;
                           item.contains(workspace_prefix+tmpNumArray[0..2].join(&apos;.&apos;)+workspace_suffix) || item.contains(workspace_prefix+tmpNumArray[0..1].join(&apos;.&apos;)+workspace_suffix)
                        }
                        //print (&quot;Found workspace:&quot; + req_workspace)
                        if (req_workspace != null) {
                            user_workspaces.remove(req_workspace);
                            user_workspaces.add(0,req_workspace);
                        }
                        workspaces_choice_list=user_workspaces.join(&apos;\n&apos;)
                    }catch (Exception e){
                        throw (e)
                    }

                   def advancedUserInput = input(
                    id: &apos;userInput&apos;, message: &apos;Build options&apos;, parameters: [
                        [$class: &apos;BooleanParameterDefinition&apos;, name: &apos;Compilation (Build/Nunit)&apos;, defaultValue: true, description:&apos;Full build (combination of all below steps)&apos;],
                        [$class: &apos;BooleanParameterDefinition&apos;, name: &apos;Media&apos;, defaultValue: true],
                        [$class: &apos;BooleanParameterDefinition&apos;, name: &apos;Sanity&apos;, defaultValue: true],
                        [$class: &apos;BooleanParameterDefinition&apos;, name: &apos;I want to custom my build steps&apos;,defaultValue:false],
                        [$class: &apos;BooleanParameterDefinition&apos;, name: &apos;Archer&apos;, defaultValue: true, description: &apos;Which product would you like to build?&apos;],
                        [$class: &apos;BooleanParameterDefinition&apos;, name: &apos;RDM&apos;, defaultValue: true],
                        [$class: &apos;BooleanParameterDefinition&apos;, name: &apos;Debug&apos;, defaultValue: true, description: &apos;Which build modes would you like to run?&apos;],
                        [$class: &apos;BooleanParameterDefinition&apos;, name: &apos;Release&apos;, defaultValue: userInput.BUILDTYPE == &apos;Task&apos;? false:true],
                        [$class: &apos;StringParameterDefinition&apos;, name: &apos;Build_Version&apos;, defaultValue: userInput.BUILDTYPE  == &apos;Formal&apos; || userInput.BUILDTYPE  == &apos;Scheduled&apos; ? nextBN:&quot;&quot;, description: &apos;Which version would you like to tag your build with?&apos;],
                        [$class: &apos;ChoiceParameterDefinition&apos;, choices: workspaces_choice_list, description: &apos;Which RTC workspace you would like to run your build with?&apos;, name: &apos;WorkSpaceName&apos;]
                    ]
                    )


                    def advancedUserInput2 = input(
                    id: &apos;userInput2&apos;, message: &apos;Advanced build options&apos;, parameters: [
                        [$class: &apos;BooleanParameterDefinition&apos;, name: &apos;Create Build Notes&apos;, defaultValue: true, description:&apos;Preperation&apos;],
                        [$class: &apos;BooleanParameterDefinition&apos;, name: &apos;Merge Dev code to Integ&apos;, defaultValue: true],
                        [$class: &apos;BooleanParameterDefinition&apos;, name: &apos;Deliver updated version files back to RTC&apos;, defaultValue: true],
                        [$class: &apos;BooleanParameterDefinition&apos;, name: &apos;Enable Code Analysis&apos;, defaultValue: true],
                        [$class: &apos;StringParameterDefinition&apos;, name: &apos;Snapshot Name&apos;, defaultValue: &quot;UOMD_BLD_${userInput.BUILD_VERSION}&quot;],
                        [$class: &apos;NodeParameterDefinition&apos;, allowedSlaves: [&apos;ALL (no restriction)&apos;], defaultSlaves: [&apos;master&apos;], description: &apos;Build Environment&apos;, name:&apos;Debug Build machine&apos;, nodeEligibility:[$class: &apos;AllNodeEligibility&apos;], triggerIfResult:&apos;allowMultiSelectionForConcurrentBuilds&apos;],
                        [$class: &apos;ChoiceParameterDefinition&apos;, choices: getAvailableNodes(), description: &apos;Build Environment&apos;, name: &apos;Debug Build machine&apos;]
                        [$class: &apos;ChoiceParameterDefinition&apos;, choices: getAvailableNodes(), name: &apos;Release Build machine&apos;]
                        [$class: &apos;StringParameterDefinition&apos;, name: &apos;Sandbox Path&apos;, defaultValue: &quot;D:\\Sandboxes\\${user_id}_${userInput.BUILD_VERSION}&quot;],
                        [$class: &apos;ChoiceParameterDefinition&apos;, choices: &apos;Auto\nTrue\nFalse&apos;, description: &apos;Controllers&apos;, name: &apos;FDC&apos;],
                        [$class: &apos;ChoiceParameterDefinition&apos;, choices: &apos;Auto\nTrue\nFalse&apos;, name: &apos;FZC&apos;],
                        [$class: &apos;ChoiceParameterDefinition&apos;, choices: &apos;Auto\nTrue\nFalse&apos;, name: &apos;IMC&apos;],
                        [$class: &apos;ChoiceParameterDefinition&apos;, choices: &apos;Auto\nTrue\nFalse&apos;, name: &apos;STAGE&apos;],
                        [$class: &apos;ChoiceParameterDefinition&apos;, choices: &apos;Auto\nTrue\nFalse&apos;, name: &apos;UMC&apos;],
                        [$class: &apos;StringParameterDefinition&apos;, name: &apos;Release email DL:&apos;, defaultValue: &quot;UOMD_BLD_${userInput.BUILD_VERSION}&quot;],
                        [$class: &apos;BooleanParameterDefinition&apos;, name: &apos;Create code view&apos;, defaultValue: true, description:&apos;Completion&apos;],
                        [$class: &apos;BooleanParameterDefinition&apos;, name: &apos;Rebase Dev code from Integ&apos;,defaultValue:false],
                        [$class: &apos;BooleanParameterDefinition&apos;, name: &apos;Deliver snapshot to stream&apos;, defaultValue: true],
                        [$class: &apos;BooleanParameterDefinition&apos;, name: &apos;Increment Build Number&apos;, defaultValue: true],
                        [$class: &apos;BooleanParameterDefinition&apos;, name: &apos;Deploy and run sanity&apos;, defaultValue: true, description:&apos;Sanity&apos;],
                        [$class: &apos;TextParameterDefinition&apos;, name: &apos;TestArray&apos;]
                    ]
                    ) 

                    }
                }
                
            }
        }
    }
    
}  
 
 def getUserRTCWorkspaces(user){
        print (&quot;Calculating workspaces for user:&quot; +user)
        rtcurl= &quot;http://clm.kla-tencor.com/ccm&quot;
        cmd=&quot;scm  list workspaces -r ${rtcurl} -u omdbuild -P Scm07^&amp; -c ${user} -m 100&quot;
        try{
            stdoutput = bat(returnStdout:true , script:cmd).trim()
        }catch(Exception e){
            throw e
        }
        def workspaces = []
        stdoutput.readLines().each {
            if (it.contains(user) &amp;&amp; !it.contains(rtcurl)){
                workspaces &lt;&lt; it.substring(it.indexOf(&apos;\&quot;&apos;)+1,it.lastIndexOf(&apos;\&quot;&apos;))
            }
        }

        return workspaces
}

def getFormalVersionsList(){
    def versionsList = []
    File[] files = new File(&quot;\\\\isr1appcc02\\scm\\OMD\\Jenkins_Build_Version&quot;).listFiles();
    for (File file : files) {
      if (!file.getName().endsWith(&quot;version.txt&quot;)) continue
      version= file.getName().substring(0,file.getName().indexOf(&apos;version&apos;))
      versionsList &lt;&lt; (version.lastIndexOf(&apos;_&apos;) == (version.length()-1) ? version[0..(version.length()-2)]:version)
    }
    return versionsList
}

def getAvailableNodes(){
    def jenkins = Jenkins.instance
    def computers = jenkins.computers
    def slaves=&apos;&apos;
    computers.each{
    if (it.isPartiallyIdle() &amp;&amp; it.getAssignedLabels().contains(new LabelAtom(&apos;BuildMachine&apos;)))
        slaves+=&quot;${it.displayName}\n&quot;
    }
    return slaves.trim();
}

    </script>
    <sandbox>false</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>