<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>30</daysToKeep>
        <numToKeep>-1</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@1.19.2">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <org.bstick12.jenkinsci.plugins.leastload.LeastLoadDisabledProperty plugin="leastload@2.0.1">
      <leastLoadDisabled>false</leastLoadDisabled>
    </org.bstick12.jenkinsci.plugins.leastload.LeastLoadDisabledProperty>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.28">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>Version</name>
          <description>Major.minor version eg: 17.14 or the Major.minor.SP Version, eg: 17.14.01.</description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    <org.jvnet.hudson.plugins.shelveproject.ShelveProjectProperty plugin="shelve-project-plugin@1.5"/>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <javaposse.jobdsl.plugin.ExecuteDslScripts plugin="job-dsl@1.70">
      <scriptText>job(&quot;OMD_${Version}_Formal_Trigger&quot;) {
    logRotator(30, -1)
  	parameters {
      	nodeParam(&apos;FlowController&apos;) {
            description(&apos;&apos;)
            defaultNodes([&apos;master&apos;])
            allowedNodes([&apos;master&apos;])
        }
      stringParam(&apos;MajorMinor_Ver&apos;, &quot;${MajorMinorVer}&quot;,&apos;The majorMinor Version of the build&apos;)
      	stringParam(&apos;emailGroups&apos;, &apos;DL-OMD-SW-SQC@kla-tencor.com,DL-OMD-SW-SCOL@KLA-Tencor.com,DL-OMD-SW-Imaging@KLA-Tencor.com,DL-OMD-ENG-SCM@KLA-Tencor.com,DL-OMD-SW-ARCH@KLA-Tencor.com&apos;, &apos;Recipients of the Scheduled build and failed formal build&apos;)
		stringParam(&apos;ReleaseEmailGroups&apos;, &apos;DL-OMD-SWFormalRelease@kla-tencor.com&apos;, &apos;Recipients of the Formal build&apos;)
		stringParam(&apos;JENKINCONFIGPATH&apos;, &apos;\\\\isr1appcc02\\SCM\\OMD&apos;,&apos;&apos;)
      stringParam(&apos;BUILD_VERSION&apos;, &quot;\\\\isr1appcc02\\scm\\OMD\\Jenkins_Build_Version\\${Version}version.txt&quot;,&apos;&apos;)
      	nodeParam(&apos;ReleaseBuildEngine&apos;) {
            description(&apos;select the release build machine&apos;)
            defaultNodes([&apos;SCM-Builds-V03&apos;])
            allowedNodes([&apos;SCM-Builds-V01&apos;, &apos;SCM-Builds-V02&apos;, &apos;SCM-Builds-V03&apos;,&apos;SCM-Builds-V04&apos;])
        }
      	nodeParam(&apos;DebugBuildEngine&apos;) {
            description(&apos;select the debug build machine&apos;)
            defaultNodes([&apos;SCM-Builds-V04&apos;])
            allowedNodes([&apos;SCM-Builds-V01&apos;, &apos;SCM-Builds-V02&apos;, &apos;SCM-Builds-V03&apos;,&apos;SCM-Builds-V04&apos;])
        }
      	booleanParam(&apos;SkipSandboxLoad&apos;, false, &apos;&apos;)
		booleanParam(&apos;RunAutoMerge&apos;, true, &apos;&apos;)
		booleanParam(&apos;GenerateAndShareBuildNotes&apos;, true, &apos;&apos;)
      	stringParam(&apos;buildResultUUID&apos;, &apos;&apos;, &apos;The UUID of the build result in RTC. It is supplied by builds initiated through RTC. For builds initiated through Hudson/Jenkins, no value should be supplied.&apos;)
    	booleanParam(&apos;Auto_Deploy_Sanity&apos;, false, &apos;will the auto deploy and sanity run for this build?&apos;)
    	textParam(&apos;TestsArray&apos;, 
                  &apos;&apos;&apos;[[Autorun_XYS_Suite_ATE_A700,X:\\ATE\\TestCases\\SQC\\Imaging\\XYS\\Autorun,Archer700,SCM-ATE-01,SimulatorEngine,D:\\BaseImage,17.11.00.21200_A700_Nunit_Image,\\\\isr1vmappcm01\\Automated_Testing\\17.10_ATE];
[AROL_Autorun_ATE_Suite,X:\\ATE\\TestCases\\SQC\\MBS\\AROL,Archer TL,SCM-ATE-01,SimulatorEngine,D:\\BaseImage,17.03.00.30400_TL_Mil_Nunit_Image,\\\\isr1vmappcm01\\Automated_Testing\\17.0x_ATE];
[Autorun_XYS_Suite_ATE_A600,X:\\ATE\\TestCases\\SQC\\Imaging,Archer600,SCM-ATE-01,SimulatorEngine,D:\\BaseImage,17.02.01.30100_A600_Mil_Nunit_Image,\\\\isr1vmappcm01\\Automated_Testing\\17.0x_ATE]]&apos;&apos;&apos;, 
                  &apos;What tests needs to run and in which confgurations?&apos;)
    }
  	environmentVariables {
        keepSystemVariables(true)
    	keepBuildVariables(true)
    	overrideBuildParameters()
    	envs(BUILDTYPE: &apos;Formal&apos;, WSName: &quot;omdbuild_Archer_${Version}_Integ_Workspace&quot;,SnapshotName:&apos;INIT_UOMD_BLD_${BUILD_VERSION}&apos;,ValidOptions:&apos;Formal,Scheduled,Tasks&apos;)
    	
    }
    configure { project -&gt;
        project &lt;&lt; scm(class: &apos;com.ibm.team.build.internal.hjplugin.RTCScm&apos;) {
            
          	overrideGlobal(&apos;false&apos;)
			timeout(&apos;0&apos;)
			buildType(&apos;buildDefinition&apos;)
			buildDefinition(&quot;OMD-Archer-V${Version}-Formal-Jenkins&quot;)
			avoidUsingToolkit(&apos;false&apos;)
			overrideDefaultSnapshotName(&apos;true&apos;)
          	customizedSnapshotName(&apos;${SnapshotName}&apos;)
          
          
        }
    }
	
  	wrappers {
        timestamps()
      	preBuildCleanup()
        environmentVariables {
        groovy(&apos;&apos;&apos;def action = currentBuild.getAction(com.ibm.team.build.internal.hjplugin.RTCBuildResultAction.class)
def buildProps = action.getBuildProperties()
def bldResultUUID=buildProps[&apos;RTCBuildResultUUID&apos;]
def teamscmfetchDestination=buildProps[&apos;team_scm_fetchDestination&apos;]
def teamscmworkspaceUUID=buildProps[&apos;team_scm_workspaceUUID&apos;]
print (&quot;buildResultUUID=&quot;+ bldResultUUID)
def map = [buildResultUUID: bldResultUUID,team_scm_workspaceUUID:teamscmworkspaceUUID,team_scm_fetchDestination:teamscmfetchDestination] 
return map 
        &apos;&apos;&apos;)
        }
         preScmSteps {
            steps {
                 environmentVariables {
                    envs(VERSIONFILE: &apos;${BUILD_VERSION}&apos;, AUTOVERSION: &apos;false&apos;,team_scm_fetchDestination:&apos;${team_scm_fetchDestination}&apos;)
                 }
                 conditionalSteps {
            		condition {
                		fileExists(&apos;${BUILD_VERSION}&apos;, BaseDir.WORKSPACE)
            		}
            		runner(&apos;Fail&apos;)
            		steps {
                		batchFile(&apos;&apos;&apos;:: run command for incrementing the version
set VERSIONCONFIG=\\\\isr1appcc02\\SCM\\OMD\\Jenkins_Build_Version\\VersionConfig.properties
set team_scm_fetchDestination=\\\\isr1appcc02\\SCM\\OMD\\Jenkins_Build_Version
set BUILDVERSION=%BUILD_VERSION%
CALL \\\\isr1appcc02\\SCM\\OMD\\Jenkins_Build_Version\\OMD_Builds\\JenkinsBuild\\VersionAutoIncremental\\AutoVersion.bat
IF %ERRORLEVEL% NEQ 0 (
	ECHO &quot;Unable to calculate BUILDVERSION&quot;
    Exit /b 1
	)&apos;&apos;&apos;)
                      	environmentVariables {
                            envs(VERSIONFILE: &apos;${BUILD_VERSION}&apos;, AUTOVERSION: &apos;true&apos;,BUILD_VERSION:&apos;${CurrentRunnningVersion}&apos;,SnapshotName:&apos;INIT_UOMD_BLD_${CurrentRunnningVersion}&apos;)
                            propertiesFile(&apos;${BUILD_VERSION}&apos;)
       					}
            		}
        		}
              	batchFile(&apos;C:\\PROGRA~1\\Unlocker\\Unlocker.exe %WORKSPACE% /S&apos;)
				systemGroovyCommand(&apos;&apos;&apos;
import hudson.model.*
import hudson.AbortException
build.getLog(100).each{
   if (it.contains(&quot;Build version calculation failed&quot;)){
	   build.result = Result.UNSTABLE
	   throw new AbortException(&quot;Build failed in new version calculation.&quot;)
   }
}
				&apos;&apos;&apos;) {}
				conditionalSteps {
					condition {
						stringsMatch(&apos;${RunAutoMerge}&apos;, &apos;true&apos;, true)
					}
					runner(&apos;Fail&apos;)
					steps {
						downstreamParameterized {
							trigger(&apos;AutoRebaseStream&apos;) {
								block {
									buildStepFailure(&apos;FAILURE&apos;)
									failure(&apos;FAILURE&apos;)
									unstable(&apos;UNSTABLE&apos;)
								}
								parameters {
									predefinedProps([MajorMinor_Ver: &apos;${MajorMinor_Ver}&apos;, fromStream: &quot;Archer_${Version}_Dev&quot;,toStream:&quot;Archer_${Version}_Integ&quot;])
								}
							}
						}
					}
				}
				downstreamParameterized {
					trigger(&apos;EnableDisableJenkinsJob&apos;) {
						block {
							buildStepFailure(&apos;FAILURE&apos;)
							failure(&apos;FAILURE&apos;)
							unstable(&apos;UNSTABLE&apos;)
						}
						parameters {
							predefinedProps([Action: &apos;Disable&apos;, JenkinsJobName: &quot;OMD_${Version}_Scheduled_Trigger&quot;])
						}
					}
				}
				conditionalSteps {
					condition {
						stringsMatch(&apos;${GenerateAndShareBuildNotes}&apos;, &apos;true&apos;, true)
					}
					runner(&apos;Fail&apos;)
					steps {
						downstreamParameterized {
							trigger(&apos;CreateBuildNotes&apos;) {
								block {
									buildStepFailure(&apos;FAILURE&apos;)
									failure(&apos;FAILURE&apos;)
									unstable(&apos;UNSTABLE&apos;)
								}
								parameters {
									predefinedProps([MajorMinor_Ver: &apos;${MajorMinor_Ver}&apos;, sStream: &apos;&apos;,tStream:&quot;Archer_${Version}_Integ&quot;,BUILD_VERSION:&apos;${BUILD_VERSION}&apos;,recipientList:&apos;DL-OMD-ENG-SCM@KLA-Tencor.com&apos;,CopyToShare:&apos;true&apos;])
								}
							}
						}
					}
				}
				downstreamParameterized {
					trigger(&apos;UpdateAndPromoteBuildWIs&apos;) {
						block {
							buildStepFailure(&apos;FAILURE&apos;)
							failure(&apos;FAILURE&apos;)
							unstable(&apos;UNSTABLE&apos;)
						}
						parameters {
							predefinedProps([BUILD_VERSION:&apos;${BUILD_VERSION}&apos;, MajorMinor_Ver: &apos;${MajorMinor_Ver}&apos;])
						}
					}
				}
        	}
            failOnError()	
        }
    }
  	steps {
        batchFile(&apos;C:\\Progra~2\\Jenkins\\tools\\hudson.tasks.Ant_AntInstallation\\RenameBuildLabel\\bin\\ant.bat -file %team_scm_fetchDestination%\\OMD_Builds\\JenkinsBuild\\VersionUpdater\\Build.xml -DbuildResultUUID=%buildResultUUID% -Dlabel=&quot;%BUILDTYPE%_UOMD_BLD_%BUILD_VERSION%&quot; &quot;-Dpassword=Scm07&amp;&quot; -DuserId=omdbuild -DtoolkitPath=C:\\Build\\TeamConcertBuild\\buildsystem\\buildtoolkit -DsnapshotUUID=%team_scm_workspaceUUID% &quot;-DrepositoryAddress=%repositoryAddress%&quot; -lib C:\\Build\\TeamConcertBuild\\buildsystem\\buildtoolkit&apos;)
        downstreamParameterized {
			trigger(&apos;RDM_NuArcher_CI_Flow&apos;) {
				block {
						buildStepFailure(&apos;FAILURE&apos;)
						failure(&apos;FAILURE&apos;)
						unstable(&apos;UNSTABLE&apos;)
					}
				  parameters {
						currentBuild()
						predefinedProp(&apos;buildRequesterUserId&apos;,&apos;omdbuild&apos;)
						predefinedProp(&apos;BUILD_VERSION&apos;,&apos;${BUILD_VERSION}&apos;)
						predefinedProp(&apos;ReleaseBuildEngine&apos;,&apos;${ReleaseBuildEngine}&apos;)
						predefinedProp(&apos;DebugBuildEngine&apos;,&apos;${DebugBuildEngine}&apos;)
						predefinedProp(&apos;MajorMinor_Ver&apos;,&apos;${MajorMinor_Ver}&apos;)
						predefinedProp(&apos;WSName&apos;,&apos;${WSName}&apos;)
						predefinedProp(&apos;team_scm_fetchDestination&apos;,&apos;D,\\\\Sandboxes\\\\omdbuild_${BUILD_VERSION}&apos;)
						predefinedProp(&apos;buildRequesterUserId&apos;,&apos;${buildRequesterUserId}&apos;)
						predefinedProp(&apos;ClosureBuildEngine&apos;,&apos;master&apos;)
						predefinedProp(&apos;BUILDTYPE&apos;,&apos;${BUILDTYPE}&apos;)
						predefinedProp(&apos;VERSIONFILE&apos;,&apos;${VERSIONFILE}&apos;)
						predefinedProp(&apos;AUTOVERSION&apos;,&apos;${AUTOVERSION}&apos;)
						predefinedProp(&apos;RunningMode&apos;,&apos;WEEKLY&apos;)
						predefinedProp(&apos;BuildAutoApproved&apos;,&apos;true&apos;)
						predefinedProp(&apos;SnapshotName&apos;,&apos;${SnapshotName}&apos;)
						predefinedProp(&apos;buildResultUUID&apos;,&apos;${buildResultUUID}&apos;)
						predefinedProp(&apos;team_scm_workspaceUUID&apos;,&apos;${team_scm_workspaceUUID}&apos;)
						predefinedProp(&apos;RunAutoRebase&apos;,&apos;${RunAutoMerge}&apos;)
						predefinedProp(&apos;ScheduledBuildJenkinsJobName&apos;,&quot;OMD_${Version}_Scheduled_Trigger&quot;)
						predefinedProp(&apos;Integ_Stream_Name&apos;,&quot;Archer_${Version}_Integ&quot;)
						predefinedProp(&apos;Dev_Stream_Name&apos;,&quot;Archer_${Version}_Dev&quot;)
				  }
			 }
		}
    }
  	publishers {
        mailer(&apos;DL-OMD-ENG-SCM@kla-tencor.com&apos;, false, false)
    }
}</scriptText>
      <usingScriptText>true</usingScriptText>
      <sandbox>false</sandbox>
      <ignoreExisting>false</ignoreExisting>
      <ignoreMissingFiles>false</ignoreMissingFiles>
      <failOnMissingPlugin>false</failOnMissingPlugin>
      <unstableOnDeprecation>false</unstableOnDeprecation>
      <removedJobAction>IGNORE</removedJobAction>
      <removedViewAction>IGNORE</removedViewAction>
      <removedConfigFilesAction>IGNORE</removedConfigFilesAction>
      <lookupStrategy>JENKINS_ROOT</lookupStrategy>
    </javaposse.jobdsl.plugin.ExecuteDslScripts>
  </builders>
  <publishers/>
  <buildWrappers>
    <EnvInjectBuildWrapper plugin="envinject@1.90">
      <info>
        <groovyScriptContent>def map = [MajorMinorVer: Version.substring(0,5)]
return map 
</groovyScriptContent>
        <loadFilesFromMaster>false</loadFilesFromMaster>
      </info>
    </EnvInjectBuildWrapper>
  </buildWrappers>
</project>