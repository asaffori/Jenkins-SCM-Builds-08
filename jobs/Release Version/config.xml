<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.23">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.1"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.3.1">
      <jobProperties/>
      <triggers/>
      <parameters>
        <string>PhoenixCondition</string>
        <string>Version</string>
        <string>Web</string>
        <string>Customer</string>
        <string>Comments</string>
        <string>ToolType</string>
        <string>RDM</string>
      </parameters>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>Version</name>
          <description>Which Version you want to release?</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ToolType</name>
          <description>Which Tool Type you want to release?</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.TextParameterDefinition>
          <name>Comments</name>
          <description>What is your comments to the release mail?</description>
          <trim>false</trim>
        </hudson.model.TextParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>RDMRelease</name>
          <description>Will RDM be released also?</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>Web</name>
          <description>Will this version be publish on Web?</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>Customer</name>
          <description>Which Customer will be relesed to?</description>
          <defaultValue>All</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.TextParameterDefinition>
          <name>PhoenixCondition</name>
          <description>Input your comments regarding the Phoenix installation:</description>
          <trim>false</trim>
        </hudson.model.TextParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@1.19.2">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <org.bstick12.jenkinsci.plugins.leastload.LeastLoadDisabledProperty plugin="leastload@2.0.1">
      <leastLoadDisabled>false</leastLoadDisabled>
    </org.bstick12.jenkinsci.plugins.leastload.LeastLoadDisabledProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.28">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.54">
    <script>import groovy.io.FileType

pipeline {
    agent any
	environment { 
		networkpath=&apos;\\\\klasj\\ktfiles\\Regions\\Israel\\SWGRP\\SW-OMD&apos;
		networkpathroot=&apos;\\\\klasj\\ktfiles\\Regions\\Israel\\SWGRP&apos;
        codeviewpath=&apos;\\\\isr1appcc02\\Views\\OMD&apos;
        phoenixpath=&apos;\\\\klasj\\ktfiles\\Regions\\Israel\\SWGRP\\SW-Common\\Phoenix&apos;
		downloadpath=&apos;\\\\klasj\\ktfiles\\Regions\\Israel\\Eng\\Download&apos;
	}
    parameters {
        string(name: &apos;Version&apos;, description: &apos;Which Version you want to release?&apos;)
		string(name: &apos;ToolType&apos;, description: &apos;Which Tool Type you want to release?&apos;)
        text(name: &apos;Comments&apos;, description: &apos;What is your comments to the release mail?&apos;)
		booleanParam(name: &apos;RDMRelease&apos;, defaultValue: true, description: &apos;Will RDM be released also?&apos;)
		booleanParam(name: &apos;Web&apos;, defaultValue: false, description: &apos;Will this version be publish on Web?&apos;)
        string(name: &apos;Customer&apos;, defaultValue: &apos;All&apos;, description: &apos;Which Customer will be relesed to?&apos;)
        text(name: &apos;PhoenixCondition&apos;, description: &apos;Input your comments regarding the Phoenix installation:&apos;)
    }
	stages {
        
	    stage (&apos;validation&apos;) {
            steps (&apos;vaiidate&apos;) {
	                script{
	                if(params.Version==&quot;&quot;){
    				    exitwitherror(&quot;Version is not defined&quot;)
	                }
	                if(params.ToolType==&quot;&quot;){
    				    exitwitherror(&quot;Released tool type is empty, at least you are releasing for one tool type&quot;)
                    }
                    shortversion=params.Version.substring(6,8)==&apos;00&apos;?Version.substring(0,6):params.Version.substring(0,8)
					majorminor=params.Version.substring(0,5)
                }
            }
	    }
        stage (&apos;CopyKit&apos;){
            steps(&apos;CopyKit&apos;){
				script{
					ArcherKitDir=&quot;${networkpath}\\Archer_Installations\\NuArcher_V&quot;+majorminor+&quot;\\Formal\\ArcherSWInsKIT_&quot;+params.Version
					Archerdirpath = &quot;${downloadpath}\\uArcher_V${shortversion}\\Tool\\ArcherSWInsKIT_${params.Version}&quot;
					Archerdir=new File(Archerdirpath)
					if(!Archerdir.exists()){
						echo &quot;Kit file for Version ${params.Version} already Copied to the download link&quot;
					}else{
						bat &quot;xcopy ${ArcherKitDir}\\*.* ${Archerdirpath}\\ /f&quot;
					}
					if(params.RDMRelease==&apos;true&apos;){
						RDMKitDir=&quot;${networkpathroot}\\SW-RDM\\RDM_Installations\\RDM_${majorminor}\\Formal\\RDM_${params.Version}&quot;
						RDMdirpath=&quot;${downloadpath}\\uArcher_V${shortversion}\\RDM\\RDM_${params.Version}&quot;
						RDMdir=new File(RDMdirpath)
						if(!RDMdir.exists()){
							echo &quot;RDM file for Version ${params.Version} already Copied to the download link&quot;
						}else{
							bat &quot;xcopy ${RDMKitDir}\\*.* ${RDMdirpath}\\ /f&quot;
						}
					}
				}
                
            }
        }
        stage (&apos;Process Parameter&apos;) {
		    steps (&apos;Parameter&apos;){
		        script {
					//get compitable RDM version
					if(params.RDMRelease==&apos;true&apos;){
						RDMVersion=params.Version
					}else{
						File RDMFolder =new File(&quot;${downloadpath}\\uArcher_V&quot;+shortversion+&quot;\\RDM&quot;)
						if(!RDMFolder.exists())exitwitherror(&quot;RDM kit folder doesn&apos;t exist&quot;)
						File[] RDMFolderContent=RDMFolder.listFiles().sort{a, b -&gt; a.lastModified() &lt;=&gt; b.lastModified()}
						RDMFolderContent.each{
					    	RDMVersion=it.getName().substring(4,18)
						}
					}
					if(RDMVersion==&quot;&quot;)exitwitherror(&quot;RDM Version is not defined&quot;)
                    echo RDMVersion
		            
		            toolSRN=&quot;Archer SRNs are residing in Documentation folder&quot;
					
		            webtext=(params.Web?&quot; ${params.Web}: Will be published on Web.&lt;/br&gt;&quot;:&quot;${params.Web}: No Web publish.&lt;/br&gt;&quot;)
					
					def props = readProperties file: &quot;\\\\isr1appcc02\\SCM\\OMD\\Jenkins_Build_conf_files\\Tooltype_DL.properties&quot;
                    
                    echo props[&apos;${ToolType}DL&apos;]
					mailgroup=props[&apos;${ToolType}DL&apos;]
					echo mailgroup
					
					string masterimage=&quot;&quot;
					File masterimagefile=new File(&quot;${codeviewpath}\\OMD-UN_&quot;+majorminor+&quot;\\UOMD_BLD_&quot;+params.Version+&quot;_code&quot;+ &quot;/OMD_Builds/JenkinsBuild/Instructions/MasterImage.html&quot;)
	                if(!masterimagefile.exists())exitwitherror(&quot;Master image html doesn&apos;t exist under code view&quot;)
	                string masterimagecontent=masterimagefile.text
					masterimage=masterimagecontent.substring(masterimagecontent.indexOf(&quot;${params.Tooltype}:&quot;),masterimagecontent.indexOf(&quot;&lt;!--${params.Tooltype}End--&gt;&quot;))
				
					def buildnotice= &quot;${codeviewpath}\\OMD-UN_&quot;+majorminor+&quot;\\UOMD_BLD_&quot;+params.Version+&quot;_code&quot;+ &quot;/OMD_Builds/JenkinsBuild/Instructions/InstallationInstruction.html&quot;;
	                def buildnoticefile = new File(buildnotice)
					if(buildnoticefile.exists()){
                		string phoenixversion=&quot;SW &quot;+shortversion+&quot; requires upgrade of the Handler SW to Phoenix SWV V&quot;
                		echo &quot;found the buildnotice file&quot;				
                		builtnoticecontent=buildnoticefile.readLines()
                		for(String line : builtnoticecontent){
                			if(line.contains(&quot;&gt;Phoenix&lt;&quot;)){
                			 string subline=line.substring(line.indexOf(&quot;&lt;TD&gt;&quot;)+4,line.length()-5)
                			 phoenixversion+=subline
                
                			continue
                			}
                		  }
                	}
                	else{
                	    exitwitherror(&quot;Build notice file under code view folder doesn&apos;t exist&quot;)
                	}
					
		            def thirdpartyism= &quot;${codeviewpath}\\OMD-UN_&quot;+majorminor+&quot;\\UOMD_BLD_&quot;+params.Version+&quot;_code&quot;+ &quot;/Installation/Archer_Family/Installshield/Archer_SW_Installation/uArcherThirdPartyInstallation/ThirdPartySetup.ism&quot;;
	                def thirdparty=new File(thirdpartyism)
					def KTCS=&quot;&quot;,KTCSHF=&quot;&quot;,Nexus=&quot;&quot;,NexusHF=&quot;&quot;,KTGem=&quot;&quot;,KTGemHF=&quot;&quot;,PSGFA=&quot;&quot;,PSGFAHF=&quot;&quot;
					
                	if(thirdparty.exists()){
                		echo &quot;found the third party ism file&quot;				
                		thirdpartycontent=thirdparty.readLines()
                		
                		for(String line : thirdpartycontent){
                			if(line.contains(&quot;PATH_TO_ARCHER_INSTALLATION&amp;gt;\\SupportFiles&quot;)||line.contains(&quot;PATH_TO_ARCHER_INSTALLATION&amp;gt;\\&amp;lt;ARCHER_VER2&amp;gt;\\SupportFiles&quot;)){
                    			if(line.contains(&quot;IMFA&quot;)||line.contains(&quot;FDC_FA_KTGEM&quot;))continue
                    			if(line.contains(&quot;NeXus&quot;)){
                    			    if(line.contains(&quot;ktgem&quot;)){
                    			        if(line.contains(&quot;HF&quot;)){
                        			        KTGemHF+=line.substring(line.indexOf(&quot;SupportFiles\\NeXus\\ktgem\\&quot;)+25,line.length()-26)+&quot; &quot;
                        			        continue
                    			        }
                    			        continue
                    			    }
                    			    else{
                    			        if(line.contains(&quot;HF&quot;)){
                    			            NexusHF+=line.substring(line.indexOf(&quot;SupportFiles\\NeXus\\&quot;)+19,line.length()-26)+&quot; &quot;
                    			            continue
                    			        }
                    			        Nexus=line.substring(line.indexOf(&quot;SupportFiles\\NeXus\\&quot;)+19,line.length()-26)   
                    			    }
                    			}
                    			if(line.contains(&quot;KTCS&quot;)){
                    			    if(line.contains(&quot;HF&quot;)){
                    			        KTCSHF+=line.substring(line.indexOf(&quot;SupportFiles\\KTCS\\&quot;)+18,line.length()-26)+&quot; &quot;
                    			        continue
                    			    }
                    			    KTCS=line.substring(line.indexOf(&quot;SupportFiles\\KTCS\\&quot;)+18,line.length()-26)
                    			}
                    			if(line.contains(&quot;PSG-FA&quot;)){
                    			    if(line.contains(&quot;HF&quot;)){
                    			        PSGFAHF+=line.substring(line.indexOf(&quot;SupportFiles\\PSG-FA\\&quot;)+20,line.length()-26)+&quot; &quot;
                    			        continue
                    			    }
                    			    PSGFA=line.substring(line.indexOf(&quot;SupportFiles\\PSG-FA\\&quot;)+20,line.length()-26)
                    			}
                			}
                		  }
                		  
                		nexusinstaller=&quot;${networkpath}\\Archer_Installations\\SupportFiles\\NeXus\\&quot;+Nexus+&quot;\\Server\\nexus_server_setup64_&quot;+Nexus+&quot;.exe&quot;
                		stdout = bat(returnStdout:true , script: &quot;7z l &quot; + nexusinstaller).trim()
                        result = stdout.readLines().findAll{ it.contains(&quot;KTGEM\\KTGEMInstaller\\ktgem_setup_&quot;)}
                        ktgeminstaller=result.join(&apos; &apos;)
                        echo ktgeminstaller
                        KTGem=ktgeminstaller.substring(ktgeminstaller.indexOf(&quot;setup&quot;)+6,ktgeminstaller.indexOf(&quot;setup&quot;)+17)
                        echo &quot;KTGemVersion:&quot;+KTGem
                        
                		 string thirdpartyversion=&quot;&lt;table&gt;&quot;+
                		 &quot;&lt;TR&gt;&lt;TD&gt;KTCS&lt;//TD&gt;&lt;TD&gt;&quot;+KTCS+&quot; &quot;+KTCSHF+&quot;&lt;//TD&gt;&lt;//TR&gt;&quot;+
                		 &quot;&lt;TR&gt;&lt;TD&gt;Nexus&lt;//TD&gt;&lt;TD&gt;&quot;+Nexus+&quot; &quot;+NexusHF+&quot;&lt;//TD&gt;&lt;//TR&gt;&quot;+
                		 &quot;&lt;TR&gt;&lt;TD&gt;KTGem&lt;//TD&gt;&lt;TD&gt;&quot;+KTGem+&quot; &quot;+KTGemHF+&quot;&lt;//TD&gt;&lt;//TR&gt;&quot;+
                		 &quot;&lt;TR&gt;&lt;TD&gt;PSG-FA&lt;//TD&gt;&lt;TD&gt;&quot;+PSGFA+&quot; &quot;+PSGFAHF+&quot;&lt;//TD&gt;&lt;//TR&gt;&lt;//table&gt;&quot;
                	}
                	else{
                	    exitwitherror(&quot;Thirdparty installshield file under code view folder doesn&apos;t exist&quot;)
                	}
		            
		            echo thirdpartyversion

		            mailcontent=&quot;Archer SWV  ${shortversion}(${params.Version}) is released for ${params.ToolType}&lt;/br&gt;&quot;+
                    &quot;&lt;strong&gt;${params.Comments}&lt;/strong&gt;&lt;/br&gt;&lt;/br&gt;&quot;+
                    &quot;&lt;strong&gt;&lt;u&gt;Tool SW&lt;/u&gt;&lt;/strong&gt;&lt;/br&gt;&quot;+
                    &quot;SWV ${params.Version} Installation kit is available in \\\\klasj\\ktfiles\\Regions\\Israel\\Eng\\Download\\uArcher_V${shortversion}\\Tool\\ArcherSWInsKIT_${params.Version}&lt;/br&gt;&quot;+
					&quot;Installation instructions are residing in Documentation folder&lt;/br&gt;&quot;+
                    &quot;${toolSRN}&quot;+
					&quot;&lt;/br&gt;&quot;+
					&quot;&lt;strong&gt;&lt;u&gt;Compatible RDM SW&lt;/u&gt;&lt;/strong&gt;&lt;/br&gt;&quot;+
					&quot;RDM ${RDMVersion} is available at \\\\klasj\\ktfiles\\Regions\\Israel\\Eng\\Download\\uArcher_V${shortversion}\\RDM\\RDM_${RDMVersion}&lt;/br&gt;&quot;+
					&quot;Installation instructions are available residing in Documentation folder.&lt;/br&gt;&quot;+
					&quot;&lt;/br&gt;&quot;+
					&quot;&lt;strong&gt;&lt;u&gt;Tool Config Utility&lt;/u&gt;&lt;/strong&gt;&lt;/br&gt;&quot;+
					&quot;Tool configuration utility can be found at  \\\\klasj\\ktfiles\\Regions\\Israel\\Eng\\Download\\uArcher_V${shortversion}\\Tool\\ArcherSWInsKIT_${params.Version}\\ToolConfiguration &lt;/br&gt;&quot;+
					&quot;&lt;/br&gt;&quot;+
					&quot;&lt;strong&gt;&lt;u&gt;Phoenix&lt;/u&gt;&lt;/strong&gt;&lt;/br&gt;&quot;+
					&quot;${phoenixversion}&lt;/br&gt;&quot;+
					&quot;Phoenix installation can be found in \\\\klasj\\ktfiles\\Regions\\Israel\\Eng\\Download\\uArcher_V${shortversion}\\Tool\\ArcherSWInsKIT_${params.Version}\\Phoenix&lt;/br&gt;&quot;+
					&quot;${params.PhoenixCondition}&quot;+
					&quot;&lt;/br&gt;&lt;/br&gt;&quot;+
					&quot;&lt;strong&gt;&lt;u&gt;Latest master images are:&lt;/u&gt;&lt;/strong&gt;&lt;/br&gt;&quot;+
					&quot;${masterimage}&quot;+
					&quot;&lt;/br&gt;&quot;+
					&quot;&lt;strong&gt;&lt;u&gt;Publish on Web:&lt;/u&gt;&lt;/strong&gt;&lt;/br&gt;&quot;+
					&quot;${webtext}&quot;+
					&quot;&lt;/br&gt;&quot;+
					&quot;&lt;strong&gt;&lt;u&gt;Customer:&lt;/u&gt;&lt;/strong&gt;&lt;/br&gt;&quot;+
					&quot;${customer}&quot;+
					&quot;&lt;/br&gt;&quot;+
					&quot;&lt;strong&gt;&lt;u&gt;Third Party Version:&lt;/u&gt;&lt;/strong&gt;&lt;/br&gt;&quot;+
					&quot;${thirdpartyversion}&quot;
					
		        }
		        emailext (to: &quot;Agnes.Zhang@KLA-tencor.com&quot;,
                subject: &quot;Archer SWV ${shortversion} (${params.Version}) is released for ${tooltype} --- for your reivew only&quot;,
                body: &quot;${mailcontent}&quot;);
		    }
        }
	     
	    stage (&apos;Send review&apos;) {
	        steps {
                echo &quot;Draft has been sent out for review&quot;
                echo &quot;${mailcontent}&quot;
            }
		    input {
                message &quot;Is the mail content fine?&quot;
                ok &quot;Yes, we can release it&quot;
            }
            
        }
        
        stage (&apos;Exculde files&apos;){
             steps {
				script{
					excludetext=&quot;\n#Added by Auto-Release script\n&quot;+&quot;UOMD_&quot;+Version+&quot;.*\n&quot;+&quot;Archer_Installation_&quot;+Version+&quot;\n&quot;+&quot;RDM_&quot;+Version+&quot;.*\n&quot;+&quot;RDM_&quot;+Version+&quot;\n&quot;+&quot;TDD_&quot;+Version+&quot;\n&quot;
					new File(&quot;\\\\isr1appcc02\\SCM\\OMD\\Jenkins_CleanupConfigurations\\AgnesTest.txt&quot;).append(excludetext)
				}
                
				
            }
        }
        stage (&apos;Send Mail&apos;) {
            steps (&apos;SendMail&apos;) {
		        emailext (to: &quot;${mailgroup}&quot;,
                subject: &quot;Archer SWV ${shortversion} (${params.Version}) is released for ${tooltype}&quot;,
                body: &quot;${mailcontent}&quot;);
		    }
        }
	}
}

def exitwitherror(msg){
    input(message:msg ,ok:&apos;Abort&apos;)
    throw new Exception(msg)
}</script>
    <sandbox>false</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>