<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.23">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.1"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.3.1">
      <jobProperties/>
      <triggers/>
      <parameters>
        <string>BaseMachineName</string>
        <string>BUILD_VERSION</string>
        <string>MACAddress</string>
        <string>ToolType</string>
        <string>TargetMachineName</string>
        <string>SnapshotName</string>
        <string>BUILDTYPE</string>
        <string>CloneType</string>
      </parameters>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>BaseMachineName</name>
          <description>What is the name of the machine to clone? 
 example: SCM-SIM-V30</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>TargetMachineName</name>
          <description>Please suggest a name to the new machine? 
 example: SCM-SIM-V90</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>CloneType</name>
          <description>Which clone type you would like to use? 
 linked: A linked clone is a copy of a virtual machine that shares virtual disks with the parent virtual machine in an ongoing manner. Ongoing changes to the virtual disk of the parent do not affect the linked clone, and changes to the disk of the linked clone do not affect the parent. 
 full: A full clone is a complete and independent copy of a virtual machine. It shares nothing with the parent virtual machine after the cloning operation. Ongoing operation of a full clone is entirely separate from the parent virtual machine.</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>linked</string>
              <string>full</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>SnapshotName</name>
          <description>What is the source machine snapshot name? 
 In case of empty value, machine will be created from last source machine start 
 example: SCM-SIM-V90</description>
          <defaultValue>LATEST</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>MACAddress</name>
          <description>Would you like to set a special MAC Adress to the target machine? if yes please specify, if not new machine will get the MAC address of the source one
MAC Address pattern: 00:50:56:xx:xx:xx
</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>ToolType</name>
          <description>Which tool type you would like to install ?</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>A700</string>
              <string>A600</string>
              <string>ATL</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>BUILDTYPE</name>
          <description>Which build type you would like to install ?</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>Tasks</string>
              <string>Formal</string>
              <string>Scheduled</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>BUILD_VERSION</name>
          <description>Which build version you wold like to install ?</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>30</daysToKeep>
        <numToKeep>-1</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@1.19.2">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <org.bstick12.jenkinsci.plugins.leastload.LeastLoadDisabledProperty plugin="leastload@2.0.1">
      <leastLoadDisabled>false</leastLoadDisabled>
    </org.bstick12.jenkinsci.plugins.leastload.LeastLoadDisabledProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.28">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.54">
    <script>def VMWareHomeDir=&apos;C:\\PROGRA~2\\VMware\\VMWARE~1&apos;
def VMWareExe=&apos;vmrun.exe&apos;
def VMMachinesRootPath=&apos;E:\\VirtualMachines&apos;

pipeline {
    agent { node { label &apos;Validation-7050&apos; } }
    options { timestamps() }
    parameters {
        string(description: &apos;What is the name of the machine to clone? \n example: SCM-SIM-V30&apos;, name: &apos;BaseMachineName&apos;)
        string(description: &apos;Please suggest a name to the new machine? \n example: SCM-SIM-V90&apos;,  name: &apos;TargetMachineName&apos;)
        choice(choices: &apos;linked\nfull&apos;, description: &apos;Which clone type you would like to use? \n linked: A linked clone is a copy of a virtual machine that shares virtual disks with the parent virtual machine in an ongoing manner. Ongoing changes to the virtual disk of the parent do not affect the linked clone, and changes to the disk of the linked clone do not affect the parent. \n full: A full clone is a complete and independent copy of a virtual machine. It shares nothing with the parent virtual machine after the cloning operation. Ongoing operation of a full clone is entirely separate from the parent virtual machine.&apos;, name: &apos;CloneType&apos;)
        string(description: &apos;What is the source machine snapshot name? \n In case of empty value, machine will be created from last source machine start \n example: SCM-SIM-V90&apos;, defaultValue:&apos;LATEST&apos;, name: &apos;SnapshotName&apos;)
        string(description: &apos;Would you like to set a special MAC Adress to the target machine? if yes please specify, if not new machine will get the MAC address of the source one\nMAC Address pattern: 00:50:56:xx:xx:xx\n&apos;, name: &apos;MACAddress&apos;)
        choice(choices: &apos;A700\nA600\nATL&apos;, description: &apos;Which tool type you would like to install ?&apos;, name: &apos;ToolType&apos;)
        choice(choices: &apos;Tasks\nFormal\nScheduled&apos;, description: &apos;Which build type you would like to install ?&apos;, name: &apos;BUILDTYPE&apos;)
        string(description: &apos;Which build version you wold like to install ?&apos;, name: &apos;BUILD_VERSION&apos;)
        
        
        
    }
    environment {
        VMWareHomeDir=&apos;&quot;C:\\Program Files (x86)\\VMware\\VMware Workstation&quot;&apos;
        VMWareExe=&apos;vmrun.exe&apos;
        VMMachinesRootPath=&apos;E:\\VirtualMachines&apos;
        BuildUser=&apos;omdbuild&apos;
        NETWORKPATH=&apos;\\\\isr1nas03&apos;
        BuildPass=&apos;Scm07&amp;&apos;
        LicensesFilePAth=&apos;\\\\klasj\\ktfiles\\Corporate\\HomeFolders\\Israel\\asaffori\\Licenses&apos;
    }
    stages {
        stage (&quot;Verify and shudown source VM&quot;){

            agent { node { label &apos;Validation-7050&apos; } } 
            steps{
                script{
                    shutdownMachine(params.BaseMachineName)
                }
            }
        }
        stage (&quot;Clonning VM&quot;){
                      agent { node { label &apos;Validation-7050&apos; } } 
            steps{
                script{
                    cloneMachine(params.BaseMachineName,params.TargetMachineName)
                    updateMachineMAC(params.TargetMachineName,params.MACAddress)
                }
            }
        }
        stage (&quot;Start clonned VM&quot;){
                      agent { node { label &apos;Validation-7050&apos; } } 
            steps{
                script{
                    startMachine(params.TargetMachineName)
                    sleep 150
                }
            }
        }
        stage (&quot;Set Machine Name and MAC Address&quot;){
                      agent { node { label &apos;Validation-7050&apos; } } 
            steps{
                script{
                    updateMachineName(params.TargetMachineName)
                    def sysMACAddress = (params.MACAddress).replace(&apos;:&apos;,&apos;-&apos;)
                    //stdoutCode=bat(returnStatus:true , script:&quot;${VMWareHomeDir}\\${VMWareExe} -T ws -gu autologonuser -gp Columbia03 runProgramInGuest ${VMMachinesRootPath}\\${params.TargetMachineName}\\${params.TargetMachineName}.vmx -activeWindow -interactive cmd.exe \&quot;/c C:\\ChangeMACAddressBatch.bat change \\\&quot;Local Area Connection\\\&quot; \\\&quot;${sysMACAddress}\\\&quot; \&quot; &quot;)
                    stdoutCode=bat(returnStatus:true , script:&quot;${VMWareHomeDir}\\${VMWareExe} -T ws -gu autologonuser -gp Columbia03 runProgramInGuest ${VMMachinesRootPath}\\${params.TargetMachineName}\\${params.TargetMachineName}.vmx \&quot;C:\\Windows\\System32\\cmd.exe\&quot; \&quot;/c C:\\ChangeMACAddressBatch.bat change \\\&quot;Local Area Connection\\\&quot; \\\&quot;${sysMACAddress}\\\&quot; \&quot; &quot;)
                }
            }
        }
        stage (&quot;Restart new VM and connect it to Jenkins&quot;){
                      agent { node { label &apos;Validation-7050&apos; } } 
            steps{
                script{
                //shutdownMachine(params.TargetMachineName)
                //sleep 60
                //startMachine(params.TargetMachineName)
                //  stdoutCode=bat(returnStatus:true , script:&quot;\&quot;${VMWareHomeDir}\&quot;\\${VMWareExe} -T ws -gu autologonuser -gp Columbia03 runScriptInGuest ${VMMachinesRootPath}\\${params.TargetMachineName}\\${params.TargetMachineName}.vmx \&quot;\&quot; \&quot;cmd.exe /k \&quot;C:\\ConnectJenkins.bat\&quot; x86\&quot; &quot;)
                stdoutCode=bat(returnStatus:true , script:&quot;${VMWareHomeDir}\\${VMWareExe} -T ws -gu autologonuser -gp Columbia03 runProgramInGuest ${VMMachinesRootPath}\\${params.TargetMachineName}\\${params.TargetMachineName}.vmx \&quot;C:\\Windows\\System32\\cmd.exe\&quot; \&quot;/c C:\\ConnectJenkins.bat \&quot; &quot;)
                }
            }
        }
        stage (&quot;Updating simulator with build version&quot;) {
            agent { node { label &quot;${params.TargetMachineName}&quot; } } 
            steps {
                bat &quot;&quot;&quot;
                    @echo off
                    echo %NETWORKPATH% \&quot;%BuildPass%\&quot; \&quot;klasj\\%BuildUser%\&quot; 
                    net use %NETWORKPATH%\\ip\$ \&quot;%BuildPass%\&quot; /user:&quot;klasj\\%BuildUser%&quot;  
                    if not exist %NETWORKPATH%\\SW-OMD\\Archer_Installations\\NuArcher_V%MajorMinor_Ver%\\%BUILDTYPE%\\Archer_Installation_%BUILD_VERSION% (
                        echo isntallation package doesn&apos;t exist on network
                        goto error
                    )
                    echo ****clean KT logs start*****
                    forfiles /p &quot;D:\\Logs&quot; /s /d -7 /c &quot;cmd /c del /q /f @file&quot;
    
                    echo ****clean KT logs end*****
    
                    echo begin copy Archer installation
                    robocopy /MT:128 /r:2 %NETWORKPATH%\\SW-OMD\\Archer_Installations\\NuArcher_V%MajorMinor_Ver%\\%BUILDTYPE%\\Archer_Installation_%BUILD_VERSION% C:\\temp\\Archer_Installation_%BUILD_VERSION% /s
                    if NOT %errorlevel% LEQ 7 (
                        echo copy installer to local failed
                        goto error
                    )
                    echo copy end 
                    
                    echo ****************Copy MPI manager from installation folder to C:\\5300\\Bin*****
                    xcopy &quot;C:\\temp\\Archer_Installation_%BUILD_VERSION%\\MPIManager\\MPIManager.exe&quot; C:\\5300\\Bin\\ /f /r /s /y
                    if not %errorlevel% equ 0 (
                        echo ***************Copy MIPmanager failed failed***************
                        goto error
                    )
                    
                    
                    
                    
                    
                    echo ****************Exporting software version from registry******
                    regedit.exe /e &quot;C:\\temp\\CurrentVersion.reg&quot; &quot;HKEY_LOCAL_MACHINE\\SOFTWARE\\KLA-Tencor\\OM\\5300\\Machine\\Software Version&quot;
                    if not %errorlevel% equ 0 goto error
                    
                    echo ****************Running ToolConfiguration for %ToolType%******
                    cd C:\\temp\\Archer_Installation_%BUILD_VERSION%\\supportfiles\\ToolConfig
                    C:\\temp\\Archer_Installation_%BUILD_VERSION%\\supportfiles\\ToolConfig\\ToolConfig.exe -I &quot;%ToolType%&quot;
                    if not %errorlevel% equ 0 (
                        echo ***************Run ToolConfiguration failed***************
                        goto error
                    )
                    
                    REG ADD &quot;HKLM\\SOFTWARE\\KLA-Tencor\\OM\\5300\\Machine\\Serial Number&quot; /t REG_SZ /d L1357 /f
                    if not %errorlevel% equ 0 goto error
                    
                    regedit.exe /S &quot;C:\\temp\\CurrentVersion.reg&quot;
                    if not %errorlevel% equ 0 goto error
                    
                    echo begin Archer installation
                    C:\\temp\\Archer_Installation_%BUILD_VERSION%\\Setup.exe /CI_INSTALL
                    set InstallExitCode=%errorlevel%
                    if %InstallExitCode%==0 goto installsucceed
                    if %InstallExitCode%==3010 goto installsucceed
                    goto installerror
                    :installsucceed
                    echo Archer installation finished successfully


                    echo ***************Inject Simulator license for %ToolType%******
                    del /q /f &quot;C:\\Program Files\\KLA-Tencor\\Component Suite\\Bin\\*.ktlic&quot;
                    
                    xcopy &quot;%LicensesFilePath%\\%ToolType%\\*.*&quot; &quot;C:\\Program Files\\KLA-Tencor\\Component Suite\\Bin\\&quot; /f /r /s /y
                    if not %errorlevel%==0 (
                        echo *********copy license file failed*************
                        goto error
                    )
                    C:\\5300\\Bin\\McdbActivate.exe -licenses
                    if not %errorlevel%==0 (
                        echo ***************active license file failed***********
                        goto error
                    )
                    
                    echo Changing registry key for auto logon:HKLM\\SOFTWARE\\KLA-Tencor\\OM\\5300\\Security\\Automatic Logon
                    REG ADD &quot;HKLM\\SOFTWARE\\KLA-Tencor\\OM\\5300\\Security\\Automatic Logon&quot; /t REG_SZ /d O1 /f
                    if not %errorlevel% equ 0 goto error
                    REG ADD &quot;HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon&quot; /v AutoAdminLogon /t REG_SZ /d 1 /f
                    if not %errorlevel% equ 0 goto error
                    
                    shutdown -r -t 50
                    set shutdownerror=%errorlevel%
                    if %shutdownerror%==1190 goto end
                    if not %shutdownerror% equ 0 goto error
                    goto end
                    :installerror
                    echo Archer installation failed to excute
                    For /f &quot;tokens=2-4 delims=/ &quot; %%a in (&apos;date /t&apos;) do (set mydate=%%c-%%a-%%b)
                    set mydate=%mydate: =_%
                    echo begin compress installation logs
                    7z a C:\\temp\\ArcherSetupLogs_%BUILD_VERSION%_%mydate%.zip C:\\Temp\\ArcherSetupLogs_%BUILD_VERSION%\
                    if not %errorlevel% equ 0 (
                    echo Compress installation logs failed, please go to %SimulatorEngine% for more information
                    goto error
                    )  
                    echo begin copy Archer installation logs to D:\\Archer_Installations\\Logs
                    echo clean logs older than 7 days
                    forfiles /p &quot;D:\\Archer_Installations\\Logs&quot; /s /d -7 /c &quot;cmd /c del /q /f @file&quot;
                    xcopy C:\\temp\\ArcherSetupLogs_%BUILD_VERSION%_%mydate%.zip D:\\Archer_Installations\\Logs\\ /f /s
                    if not %errorlevel% equ 0 (
                    echo copy Archer installation logs failed
                    goto error
                    )
                    echo copy end 
                    
                    :error
                    exit /b 1
                    :end
                    exit /b 0

                &quot;&quot;&quot;
            }
        }
    }
}

def updateMachineName(String machine){
     //   print (&quot;Iam here0&quot;)
    //file=new File(&quot;${VMMachinesRootPath}\\${machine}\\COMPUTERNAME.txt&quot;)
   // print (&quot;Iam here:&quot;+machine)
    
    writeFile file: &quot;${VMMachinesRootPath}\\${machine}\\COMPUTERNAME.txt&quot;, text: machine
   
    bat &quot;${VMWareHomeDir}\\${VMWareExe} -T ws -gu autologonuser -gp Columbia03 copyFileFromHostToGuest ${VMMachinesRootPath}\\${machine}\\${machine}.vmx ${VMMachinesRootPath}\\${machine}\\COMPUTERNAME.txt C:\\COMPUTERNAME.txt&quot;
}

def shutdownMachine(String machine){
    stdoutCode=bat(returnStatus:true , script:&quot;${VMWareHomeDir}\\${VMWareExe} -T ws stop ${VMMachinesRootPath}\\${machine}\\${machine}.vmx soft&quot;)
    if (stdoutCode == -1) return;
}

def startMachine(String machine){
    bat &quot;${VMWareHomeDir}\\${VMWareExe} -T ws start ${VMMachinesRootPath}\\${machine}\\${machine}.vmx nogui&quot;
}

def cloneMachine(String machine,String newMachine){
    bat &quot;${VMWareHomeDir}\\${VMWareExe} -T ws clone ${VMMachinesRootPath}\\${machine}\\${machine}.vmx ${VMMachinesRootPath}\\${newMachine}\\${newMachine}.vmx ${params.CloneType} ${params.SnapshotName} -cloneName=${newMachine}&quot;
}

def updateMachineMAC(String machine,String MACAddress){
//    def file = new File(&quot;${VMMachinesRootPath}\\${machine}\\${machine}.vmx&quot;)
 //   def newConfig = file.text.replaceRegex(&apos;ethernet0.addressType=.*&apos;, &apos;ethernet0.addressType=static&apos;)
  //  file.text = newConfig.replaceRegex(&apos;ethernet0.address=.*&apos;, &quot;ethernet0.address=${MACAddress}&quot;)

withEnv([&quot;MACAddress=$MACAddress&quot;,&quot;machine=$machine&quot;]) {
  stdout=bat(returnStdout:true, script: 
  &quot;&quot;&quot;
  :: Set new MAC Address
  %windir%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -Command &quot;(gc %VMMachinesRootPath%\\%machine%\\%machine%.vmx ) -replace &apos;^ethernet0.addressType.*\$&apos;, &apos;ethernet0.addressType=static&apos;| Out-File -FilePath %VMMachinesRootPath%\\%machine%\\%machine%.vmx.tmp -Encoding UTF8&quot;
  %windir%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -Command &quot; &apos;ethernet0.address=$env.MACAddress&apos; |Out-File -FilePath %VMMachinesRootPath%\\%machine%\\%machine%.vmx.tmp&quot; -Append  -Encoding UTF8
  
  ren %VMMachinesRootPath%\\%machine%\\%machine%.vmx %machine%.vmx.old
  ren %VMMachinesRootPath%\\%machine%\\%machine%.vmx.tmp %machine%.vmx
  ::del /f %VMMachinesRootPath%\\%machine%\\%machine%.vmx.tmp
  &quot;&quot;&quot;)
  
}
  println (&quot;stdout ################################## &quot;+stdout+ &quot;  #######################&quot;)
}</script>
    <sandbox>false</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>