<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.23">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.1"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.3.1">
      <jobProperties/>
      <triggers/>
      <parameters>
        <string>Version</string>
        <string>SourceStreamSnapshotName</string>
        <string>SourceStreamName</string>
      </parameters>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>This Job is created to open new Version for development, inlcuindg following steps:&lt;br&gt;&#xd;
1. create new Dev/Integ stream, eg: Archer_17.14.01_Dev\Archer_17.14.01_Integ&lt;br&gt;&#xd;
2. create new Dev/Integ build workspace&lt;br&gt;&#xd;
3. Create Scheduled/Formal build trigger&lt;br&gt;&#xd;
4. Create new Version file with specfic build start number&lt;br&gt;&#xd;
5. Copy Help folder from the base veresion&lt;br&gt;</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>Version</name>
          <description>Which Version you want to Create? eg:17.14 or 17.14.01</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>SourceStreamName</name>
          <description>What is your Source stream name?</description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>SourceStreamSnapshotName</name>
          <description>What is your Source stream name snapshot name?</description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@1.19.2">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <org.bstick12.jenkinsci.plugins.leastload.LeastLoadDisabledProperty plugin="leastload@2.0.1">
      <leastLoadDisabled>false</leastLoadDisabled>
    </org.bstick12.jenkinsci.plugins.leastload.LeastLoadDisabledProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.28">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.54">
    <script>pipeline {
     agent {label &apos;master&apos;}
     environment { 
        repositoryAddress = &apos;http://clm.kla-tencor.com/ccm&apos;
        networkpath=&apos;\\\\klasj\\ktfiles\\Regions\\Israel\\SWGRP\\SW-OMD&apos;
        builduser=&apos;omdbuild&apos;
        scmbuildpass=&quot;Scm07^&amp;&quot;
        versionfilepath=&apos;\\\\isr1appcc02\\SCM\\OMD\\Jenkins_Build_Version&apos;      
        
    }
    parameters {
        string(name: &apos;Version&apos;, description: &apos;Which Version you want to Create? eg:17.14 or 17.14.01&apos;)
		string(name: &apos;SourceStreamName&apos;, defaultValue: &apos;&apos;, description: &apos;What is your Source stream name?&apos;)
		string(name: &apos;SourceStreamSnapshotName&apos;, defaultValue: &apos;&apos;, description: &apos;What is your Source stream name snapshot name?&apos;)
    }
    
	stages {    
	    stage (&apos;Validation&apos;) {
            steps (&apos;vaiidate&apos;) {
	                script{
	                if(params.Version==&quot;&quot;){
    				    exitwitherror(&quot;Version is not defined&quot;)
	                }  
					MajorMinorSP=params.Version
					if(params.Version.length()&lt;6) MajorMinorSP=params.Version+&quot;.00&quot;
					
					def userInput=input(
					id: &apos;userInput&apos;, message: &apos;Please verify the below parameters:&apos;, parameters: [
					string(defaultValue: &quot;Archer_${params.Version}_Dev&quot;,description: &apos;Dev stream name&apos;,name: &apos;DevStream&apos;),
					string(defaultValue: &quot;Archer_${params.Version}_Integ&quot;,description: &apos;Integ stream name&apos;,name: &apos;IntegStream&apos;),
					string(defaultValue: &quot;omdbuild_Archer_${params.Version}_Dev_Workspace&quot;,description: &apos;Dev workspace name&apos;,name: &apos;DevWorkspace&apos;),
					string(defaultValue: &quot;omdbuild_Archer_${params.Version}_Integ_Workspace&quot;,description: &apos;Integ workspace name&apos;,name: &apos;IntegWorkspace&apos;),
					string(defaultValue: &quot;OMD-Archer-V${params.Version}-Scheduled-Jenkins&quot;,description: &apos;Scheduled build definition name&apos;,name: &apos;ScheduledBD&apos;),
					string(defaultValue: &quot;OMD-Archer-V${params.Version}-Formal-Jenkins&quot;,description: &apos;Formal build definition name&apos;,name: &apos;FormalBD&apos;),
					string(defaultValue: &quot;OMD_${params.Version}_Scheduled_Trigger&quot;,description: &apos;Scheduled build job trigger&apos;,name: &apos;ScheduledTrigger&apos;),
					string(defaultValue: &quot;OMD_${params.Version}_Formal_Trigger&quot;,description: &apos;Formal build job trigger&apos;,name: &apos;FormalTrigger&apos;),
					string(defaultValue: &quot;${params.Version}version.txt&quot;,description: &apos;Version file name&apos;,name: &apos;Versionfile&apos;),
					string(defaultValue: &quot;${MajorMinorSP}.20000&quot;,description: &apos;The starting build numbering&apos;,name: &apos;StartingVersion&apos;),
					],submitter: &apos;DL-OMD-ENG-SCM&apos;,ok:&apos;Corret, lets create it&apos;)
					
					
					env.InputDevStream = userInput.DevStream
					env.InputIntegStream = userInput.IntegStream
					env.InputDevWorkspace = userInput.DevWorkspace
					env.InputIntegWorkspace = userInput.IntegWorkspace
					env.InputScheduledBD = userInput.ScheduledBD
					env.InputFormalBD = userInput.FormalBD
					env.InputScheduledTrigger = userInput.ScheduledTrigger
					env.InputFormalTrigger = userInput.FormalTrigger
					env.InputVersionfile = userInput.Versionfile
					env.InputStartingVersion = userInput.StartingVersion
	            }
            }
	    }
		stage (&apos;CreateNewStreams&apos;){
			steps (&apos;CreateNewStreams&apos;){
				build job: &apos;CreateStreamCM&apos;, parameters: 
				[
				[$class: &apos;TextParameterValue&apos;, name: &apos;streamTitle&apos;, value:env.InputDevStream],
				[$class: &apos;StringParameterValue&apos;, name: &apos;SourceStreamName&apos;, value: params.SourceStreamName],
				[$class: &apos;TextParameterValue&apos;, name: &apos;SourceStreamSnapshotName&apos;, value: params.SourceStreamSnapshotName]
				], wait: true
				build job: &apos;CreateStreamCM&apos;, parameters: 
				[
				[$class: &apos;TextParameterValue&apos;, name: &apos;streamTitle&apos;, value:env.InputIntegStream],
				[$class: &apos;StringParameterValue&apos;, name: &apos;SourceStreamName&apos;, value: params.SourceStreamName],
				[$class: &apos;TextParameterValue&apos;, name: &apos;SourceStreamSnapshotName&apos;, value: params.SourceStreamSnapshotName]
				], wait: true
			}

		}
		stage (&apos;CreateNewWorkspaces&apos;){
			steps (&apos;CreateNewWorkspaces&apos;) {
	                script{
						bat &quot;scm create workspace -r ${repositoryAddress} -u ${builduser} -P ${scmbuildpass} -s ${env.InputDevStream} ${env.InputDevWorkspace}&quot;
						bat &quot;scm create workspace -r ${repositoryAddress} -u ${builduser} -P ${scmbuildpass} -s ${env.InputIntegStream}  ${env.InputIntegWorkspace}&quot;
					}
			}
		}
		stage (&apos;CreateBuildDefinitions&apos;){
			steps (&apos;CreateBDs&apos;){
				build job: &apos;CreateBuildDefinition&apos;, parameters: 
				[
				[$class: &apos;StringParameterValue&apos;, name: &apos;RTCWorkspace&apos;, value:env.InputDevWorkspace],
				[$class: &apos;StringParameterValue&apos;, name: &apos;BuildDefinationName&apos;, value: env.InputScheduledBD],
				[$class: &apos;StringParameterValue&apos;, name: &apos;BUILDTYPE&apos;, value: &quot;Scheduled&quot;]
				], wait: true
				build job: &apos;CreateBuildDefinition&apos;, parameters: 
				[
				[$class: &apos;StringParameterValue&apos;, name: &apos;RTCWorkspace&apos;, value:env.InputIntegWorkspace],
				[$class: &apos;StringParameterValue&apos;, name: &apos;BuildDefinationName&apos;, value: env.InputFormalBD],
				[$class: &apos;StringParameterValue&apos;, name: &apos;BUILDTYPE&apos;, value: &quot;Formal&quot;]
				], wait: true
			}
		}
		stage (&apos;CreateJenkinsTriggers&apos;){
			steps (&apos;CreateTriggerJobs&apos;){
				build job: &apos;CreateScheduledTrigger&apos;, parameters: 
				[
				[$class: &apos;StringParameterValue&apos;, name: &apos;Version&apos;, value:params.Version],
				[$class: &apos;StringParameterValue&apos;, name: &apos;RTCWorkSpace&apos;, value:env.InputDevWorkspace],
				[$class: &apos;StringParameterValue&apos;, name: &apos;VersionFileName&apos;, value:env.InputVersionfile],
				[$class: &apos;StringParameterValue&apos;, name: &apos;RTCBuildDefinition&apos;, value:env.InputScheduledBD],
				[$class: &apos;StringParameterValue&apos;, name: &apos;ScheduledTrigger&apos;, value:env.InputScheduledTrigger],
				], wait: true
				build job: &apos;CreateFormalTrigger&apos;, parameters: 
				[
				[$class: &apos;StringParameterValue&apos;, name: &apos;Version&apos;, value:params.Version],
				[$class: &apos;StringParameterValue&apos;, name: &apos;FormalTrigger&apos;, value:env.InputFormalTrigger],
				[$class: &apos;StringParameterValue&apos;, name: &apos;ScheduledTrigger&apos;, value:env.InputScheduledTrigger],
				[$class: &apos;StringParameterValue&apos;, name: &apos;RTCWorkSpace&apos;, value:env.InputIntegWorkspace],
				[$class: &apos;StringParameterValue&apos;, name: &apos;VersionFileName&apos;, value:env.InputVersionfile],
				[$class: &apos;StringParameterValue&apos;, name: &apos;IntegStream&apos;, value:env.InputIntegStream],
				[$class: &apos;StringParameterValue&apos;, name: &apos;DevStream&apos;, value:env.InputDevStream],
				[$class: &apos;StringParameterValue&apos;, name: &apos;RTCBuildDefinition&apos;, value:env.InputFormalBD],
				], wait: true
			}
		}
		
		stage (&apos;CreateHelpFolder&apos;){
			steps{
				script{
				    echo &quot;$params.SourceStreamName&quot;
					basever=&quot;$params.SourceStreamName&quot;.substring(7,12)
					echo basever
					MajorMinor=params.Version.substring(0,5)
					def helpdirpath = &quot;${networkpath}\\Archer_Installations\\NuArcher_V${MajorMinor}\\HelpFiles&quot;
					def helpdir=new File(helpdirpath)
					if(!helpdir.exists()){
			        	bat &quot;xcopy ${networkpath}\\Archer_Installations\\NuArcher_V${basever}\\HelpFiles\\*.* ${networkpath}\\Archer_Installations\\NuArcher_V${MajorMinor}\\HelpFiles\\ /f /s&quot;
				
					}
				}
			}
		}
		stage (&apos;CreateVersionFile&apos;){
			steps{
				script{
					File VersionFile = new File(versionfilepath+&quot;\\&quot;+env.InputVersionfile)
					if(VersionFile.exists()) currentBuild.result = &apos;UNSTABLE&apos;
					VersionFile.write &quot;CurrentVersion=&quot;+env.InputStartingVersion+&quot;\nCurrentRunnningVersion=&quot;+env.InputStartingVersion
				}
			}
		}
	}
	post { 
        success { 
            wrap([$class: &apos;BuildUser&apos;]) {
                    // notify users when the Pipeline success
                    emailext (to: &quot;${BUILD_USER_EMAIL}&quot;,
                    subject: &quot;Version ${params.Version} creation - SUCCESS&quot;,
                    body: &quot;&quot;&quot;
                    Dear User:&lt;br&gt;
                    Version ${params.Version} is created successfully!&lt;br&gt;
					Details: &lt;br&gt;
					Dev stream name: ${env.InputDevStream}&lt;br&gt;
					Scheduled build workspace name: ${env.InputDevWorkspace}&lt;br&gt;
					Scheduled RTC build definition name:${env.InputScheduledBD}&lt;br&gt;
					Scheduled Jenkins build trigger:${env.InputScheduledTrigger}&lt;br&gt;
					&lt;br&gt;
					Integ stream name: ${env.InputIntegStream}&lt;br&gt;
					Formal build workspace name: ${env.InputIntegWorkspace}&lt;br&gt;
					Formal RTC build definition name:${env.InputFormalBD}&lt;br&gt;
					Formal Jenkins build trigger:${env.InputFormalTrigger}&lt;br&gt;
					&lt;br&gt;
					Build number will start from ${env.InputStartingVersion}&lt;br&gt;

                    &quot;&quot;&quot;);
                }
        }
        failure { 
            wrap([$class: &apos;BuildUser&apos;]) {
                    // notify users when the Pipeline success
                    emailext (to: &quot;${BUILD_USER_EMAIL}&quot;,
                    subject: &quot;Version ${params.Version} creation - FAILURE&quot;,
                    body: &quot;&quot;&quot;
                    Dear User:&lt;br&gt;
                    Version ${params.Version} failed to create, check the below log link for more details&lt;br&gt;
                    ${env.BUILD_URL}&lt;br&gt;
                    &quot;&quot;&quot;);
                }
        }
        unstable { 
            wrap([$class: &apos;BuildUser&apos;]) {
                    // notify users when the Pipeline success
                    emailext (to: &quot;${BUILD_USER_EMAIL}&quot;,
                    subject: &quot;Version ${params.Version} creation - UNSTABLE&quot;,
                    body: &quot;&quot;&quot;
                    Dear User:&lt;br&gt;
                    Version ${params.Version} already has a version file on sharefolder, please manually handle it later on.details&lt;br&gt;
                    ${versionfilepath}\\$env.InputVersionfile}&lt;br&gt;
                    &quot;&quot;&quot;);
                }
        }
        
    }
}

def exitwitherror(msg){
    input(message:msg ,ok:&apos;Abort&apos;)
    throw new Exception(msg)
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>